(rp (
(optics/beam/ray-npnts 100)
(dynamesh/smooth/rbf/max_rel_error 1e-05)
(dynamesh/smooth/rbf/max_abs_error 1e-05)
(udf/battery/newman-swell-layer-n-fcn "none")
(pressure/skewness-correction-enhanced? #f)
(electrolyte-potential/solve? #t)
(electrolyte-potential/pseudo-specific? #f)
(electrolyte-potential/scheme 1)
(electrolyte-potential/relax 1.)
(electrolyte-potential/pseudo-relax 0.75)
(electrolyte-potential/explicit-urf 1.)
(electrolyte-potential/max-iter 5)
(electrolyte-potential/residual-tolerance 1e-06)
(electrolyte-potential/iter-tolerance 0.05)
(electrolyte-potential/long-diffusion? #t)
(electrolyte-potential/secondary-gradient? #t)
(electrolyte-potential/secondary-bc-gradient? #t)
(electrolyte-potential/debug-info? #f)
(electrolyte-potential/pseudo-implicit-relax 1.)
(electrolyte-potential/pseudo-time-scale-factor 1.)
(electrolyte-potential/amg-alpha 0.1)
(electrolyte-potential/amg-beta 0.7)
(electrolyte-potential/cycle-type 3)
(electrolyte-potential/amg-method 0)
(electrolyte-potential/amg-stabilization 0)
(electrolyte-potential/pseudo-cycle-type 3)
(electrolyte-potential/default 0.)
(electrolysis/source-urf-factor 20)
(electrolysis/mp-source #f)
(species/tfm/omega-beta 10)
(species/tfm/omega-num-smooths 5)
(species/tfm/omega-calc-method 0)
(species/tfm/omega-rxn-index 0)
(species/tfm/closure-method 2)
(dpm/spray-suite-tab-evaluate-double-ddrag? #f)
(electrolyte-potential/dual-ts-implicit-relax 1.)
(electrolyte-potential/dual-ts-cycle-type 3)
(soot-mom/use-scalar-nucl? #f)
(soot-mom/nucl-src-udm-id 0)
(soot-mom/nucl-scalar-id 0)
(oned/modified-wall-names ())
(oned/modified-wall-ids ())
(oned/modified-walls? #f)
(ablation/consider-flux? #f)
(mixing-plane/gradient-copy-method 0)
(mixing-plane/rgrad-copy-method 0)
(mpm/viability-conds 0.3)
(mpm/downstream-mixing-only? #t)
(gcm/enable-dpm? #f)
(gcm/dpm-treatment-on? #f)
(dynamesh/per/enable-icm? #f)
(mp/mt/sbm/ht-relax-new? #t)
(mp/mt/sbm/wall-evap/ystar 1.)
(premixc/fgm-use-const-scaling? #t)
(premixc/fgm-use-eff? #f)
(dpm/htc/improved-gas-temp-prediction? #t)
(dual-potential/dual-ts-cycle-type 3)
(dual-potential/dual-ts-implicit-relax 1.)
(mp/mt/higbie-mass-t? #f)
(dual-potential/default 0.)
(dual-potential/pseudo-cycle-type 3)
(dual-potential/amg-stabilization 0)
(dual-potential/amg-method 0)
(dual-potential/cycle-type 3)
(dual-potential/amg-beta 0.7)
(dual-potential/amg-alpha 0.1)
(dual-potential/pseudo-time-scale-factor 1.)
(dual-potential/pseudo-implicit-relax 1.)
(dual-potential/debug-info? #f)
(dual-potential/secondary-bc-gradient? #t)
(dual-potential/secondary-gradient? #t)
(dual-potential/long-diffusion? #t)
(dual-potential/iter-tolerance 0.05)
(dual-potential/residual-tolerance 1e-06)
(dual-potential/max-iter 5)
(dual-potential/explicit-urf 1.)
(dual-potential/pseudo-relax 0.75)
(dual-potential/relax 1.)
(dual-potential/scheme 1)
(dual-potential/pseudo-specific? #f)
(dual-potential/solve? #t)
(ccs/dir/compute? #t)
(named-expressions (((name . "inlet1_vel") (definition . "1 [m/s]") (description . "") (parameterid . "real-1") (parametername . "inlet1_vel") (unit . "velocity") (input-parameter . #t) (output-parameter . #f)) ((name . "inlet1_temp") (definition . "300 [K]") (description . "") (parameterid . "real-2") (parametername . "inlet1_temp") (unit . "temperature") (input-parameter . #t) (output-parameter . #f)) ((name . "inlet2_vel") (definition . "1 [m/s]") (description . "") (parameterid . "real-3") (parametername . "inlet2_vel") (unit . "velocity") (input-parameter . #t) (output-parameter . #f)) ((name . "inlet2_temp") (definition . "350 [K]") (description . "") (parameterid . "real-4") (parametername . "inlet2_temp") (unit . "temperature") (input-parameter . #t) (output-parameter . #f))))
(strategy/solution-strategy/modifications ((type . list-class) (min-length . 0) (max-length . #f) (curr-length . 0) (member-vars)))
(strategy/solution-strategy/original-settings ((type . struct-class) (members-state (active? (value . #t) (type . boolean-class)) (name (value . "Original Settings") (type . string-class)) (python-cmd? (value . #f) (type . boolean-class)) (command (value . "") (type . string-class)) (count (type . integer-class) (value . 1) (min . 0) (max . #f)) (ftselected (value . #f) (type . boolean-class)) (flowtime (type . real-class) (value . 0.) (min . 0.) (max . #f) (units-quantity . #f)))))
(strategy/solution-strategy/before-init-modification ((type . struct-class) (members-state (active? (value . #f) (type . boolean-class)) (name (value . "Pre-Initialization") (type . string-class)) (python-cmd? (value . #f) (type . boolean-class)) (command (value . "") (type . string-class)) (count (type . integer-class) (value . 0) (min . 0) (max . #f)) (ftselected (value . #f) (type . boolean-class)) (flowtime (type . real-class) (value . 0.) (min . 0.) (max . #f) (units-quantity . #f)))))
(strategy/initialization-strategy ((selection . init-from-case) (type . union-class) (members-state (init-from-case . #f) (init-from-data-file (type . file-class) (value . "") (remote-file? . #t) (file-pattern . "*.dat*")) (init-from-solution (selection . init-from-case) (type . union-class) (members-state (init-from-case . #f) (init-from-data-file (type . file-class) (value . "") (remote-file? . #t) (file-pattern . "*.dat*")))))))
(parameters/enable-in-tui? #t)
(parameters/output-parameters ((report-definition-parameter-1 ((type . report-definition-parameter) (name (value . "outlet-temp-avg-op") (type . string-class)) (settings (report-defn-name . "outlet-temp-avg")) (units-quantity temperature #f) (fluent-units . "K "))) (report-definition-parameter-2 ((type . report-definition-parameter) (name (value . "outlet-vel-avg-op") (type . string-class)) (settings (report-defn-name . "outlet-vel-avg")) (units-quantity velocity #f) (fluent-units . "m s^-1 ")))))
(fluent-case-version-in-bc-file 241)
(perforated/model-setup ((-1 0 #t #t #f (-1 0 0 0))))
(domains (((1 geom-domain mixture) (children) (material . air))))
(sc/enable-new-defaults-for-transfers? #f)
(monitor/report-definitions (((name . "outlet-vel-avg") (report-definition "surface-areaavg" (field . "velocity-magnitude") (old-props) (surface-ids 1 1) (surface-names "outlet" outlet) (per-surface? . #f) (average-over . 1) (phase . "mixture") (report-type . "") (retain-instantaneous-values? . #f) (physics) (geometry) (surfaces))) ((name . "outlet-temp-avg") (report-definition "surface-areaavg" (field . "temperature") (old-props) (surface-ids 1 1) (surface-names "outlet" outlet) (per-surface? . #f) (average-over . 1) (phase . "mixture") (report-type . "") (retain-instantaneous-values? . #f) (physics) (geometry) (surfaces)))))
(monitor/convergencesets ((frequency . 1) (condition . #f) (conv-reports) (check-for . #f)))
(graphics/raytracer ((env-light-dirvec 0 0 1) (env-light-upvec 0 1 0) (light-presets . "None") (floor-extent . 1) (infinite-floor? . #f) (show-floor? . #f) (fov . 20) (env-intensity . 1) (env-color . "#ffffff") (spin . 0) (vertical . 0) (horizontal . 0) (background-color . "#a2a6ba") (backplate-texture . "None") (show-backplate? . #f) (environment-texture . "Alps Field Midday") (show-environment-texture? . #t) (quality . 90) (timeout . 10) (denoiser? . #t) (threads-count . 8) (live-raytracing? . #t) (name . "global")))
(graphics/animation-objects/recent/history (("animation-1" . "animation-1_0329.hsf")))
(soot-mom/sgs-rxn-params ((0 42000000000. 54390000. 0 3900000000. 46020000. 0) (1 10000000. 5983000. 0.734 368000. 71550000. 1.139) (2 20000000000. 0 0 0 0 0) (3 80000. 15900000. 1.56) (4 2000000000. 31387000. 0) (5 0.13 0 0)))
(vd-fvar/dual-ts-implicit-relax 1.)
(vc-fvar/dual-ts-implicit-relax 1.)
(ic-fvar/dual-ts-implicit-relax 1.)
(dual-ts/rm-atau-local-resid? #t)
(pseudo-auto-time-step 0.001022704668868412)
(pseudo-transient-formulation? #t)
(dpm/variable-interpolation/coarse-factor 1.)
(dpm/use-consistent-lmf-limiters? #f)
(dpm/subtet/gti-crossover-tolerance 0.0001)
(dpm/subtet/remove-stuck-particles? #f)
(dpm/subtet/use-high-res-oil-flow? #f)
(dpm/parallel/hybrid/deposit-in-order? #f)
(fmg-init/max-fas-iterations-on-level (1 10 50 100 500 500 500 500 500 500 500 500))
(fmg-init/verbose? #f)
(amg-scalar/group-size-3d 6)
(amg/greedy-coarsening? #t)
(amg-coupled/greedy-coarsening? #t)
(amg-coupled/group-size-3d 6)
(amg/map-neighb/poly? #f)
(prepdf/nonadia-fla-max-inlet-temp 1200)
(omega/default 102.6880518609591)
(k/default 0.01500000000000001)
(mp/hmt/mt-tpc-advance-vof-seeding 0.)
(flow/scheme 24)
(species/tfm/sensor-calc-method 1)
(species/tfm/e-method 1)
(electrolysis/cathode-cl/material "")
(electrolysis/cathode-pl/material "")
(electrolysis/cathode-cc/material "")
(electrolysis/mem/material "")
(electrolysis/anode-cl/material "")
(electrolysis/anode-pl/material "")
(electrolysis/anode-cc/material "")
(electrolysis/cathode-ex-c 1.)
(electrolysis/cathode-ex-a 1.)
(electrolysis/cathode-exp 1.)
(electrolysis/cathode-jref 10.)
(electrolysis/anode-entro -163300.)
(electrolysis/anode-ex-c 1.)
(electrolysis/anode-ex-a 1.)
(electrolysis/anode-jref 10000.)
(electrolysis/total-voltage 0.85)
(electrolysis/half-cell-voltage #t)
(lithium/activity-function ())
(lithium/tplus-function ())
(lithium/anode-eq-p ())
(lithium/cathode-eq-p ())
(potential/amg-stabilization 0)
(species/isat-file "Static_Mixture")
(temperature/anisotropy/coeff/wall 1)
(temperature/anisotropy-version 1)
(temperature/default 300.0000002453355)
(pbs/flux-auto-select? #f)
(pressure/flow-init-type 1)
(pressure/default 4.365574568510056e-11)
(time/parameters/hybrid-coefficient 0)
(time/adaptive/cfl-type 4)
(time/adaptive/dt-modes-overwrited? #t)
(time/incremental-time 1000.)
(y-velocity/default -3.2711408707836e-08)
(x-velocity/default 1.864194767337069e-16)
(spectral/plfd/nper 1)
(spectral/plfd/relax 1.)
(residuals/settings-transient ((continuity #t 0. #t 0.001 0.001 1e-05 0.0001 0. 0.05) (x-velocity #t 0. #t 0.001 0.001 1e-05 0.0001 0. 0.05) (y-velocity #t 0. #t 0.001 0.001 1e-05 0.0001 0. 0.05) (z-velocity #t 0. #t 0.001 0.001 1e-05 0.0001 0. 0.05) (energy #t 0. #t 1e-06 1e-06 1e-05 0.0001 0. 0.05) (k #t 0. #t 0.001 0.001 1e-05 0.0001 0. 0.05) (omega #t 0. #t 0.001 0.001 1e-05 0.0001 0. 0.05)))
(residuals/settings ((continuity #t 0. #t 0.001 0.001 1e-05 0.0001 0. 0.05) (x-velocity #t 0. #t 0.001 0.001 1e-05 0.0001 0. 0.05) (y-velocity #t 0. #t 0.001 0.001 1e-05 0.0001 0. 0.05) (z-velocity #t 0. #t 0.001 0.001 1e-05 0.0001 0. 0.05) (energy #t 0. #t 1e-06 1e-06 1e-05 0.0001 0. 0.05) (k #t 0. #t 0.001 0.001 1e-05 0.0001 0. 0.05) (omega #t 0. #t 0.001 0.001 1e-05 0.0001 0. 0.05)))
(mesh/interpolate-in-time? #f)
(dynamesh/motion-history/basename "Static_Mixture")
(dynamesh/in-cyn/crank-period 10000000000.)
(dynamesh/in-cyn/crank-rpm 0.1666666666666667)
(numerics/flexible/mode 0)
(dynamesh/sdof/implicit-udf-forces? #f)
(dynamesh/remesh/repartition-interface-threshold 10.)
(dynamesh/remesh/repartition-interval 10)
(dynamesh/remesh/rdc/replicate-cells? #f)
(number-of-iterations 100)
(materials ((air fluid (chemical-formula . #f) (density (constant . 1.225) (compressible-liquid 101325 1.225 142000. 1 1.1 0.9)) (specific-heat (constant . 1006.43) (polynomial piecewise-polynomial (100 1000 1161.48214452351 -2.36881890191577 0.0148551108358867 -5.03490927522584e-05 9.9285695564579e-08 -1.11109658897742e-10 6.54019600406048e-14 -1.57358768447275e-17) (1000 3000 -7069.81410143802 33.7060506468204 -0.0581275953375815 5.42161532229608e-05 -2.936678858119e-08 9.237533169567681e-12 -1.56555339604519e-15 1.11233485020759e-19)) (polynomial nasa-9-piecewise-polynomial (200. 1000. 2898903. -56496.26 1437.799 -1.653609 0.003062254 -2.279138e-06 6.272365e-10) (1000. 6000. 69324940. -361053.2 1476.665 -0.06138349 2.027963e-05 -3.075525e-09 1.888054e-13))) (thermal-conductivity (constant . 0.0242)) (viscosity (constant . 1.7894e-05) (sutherland 1.716e-05 273.11 110.56) (power-law 1.716e-05 273.11 0.666) (blottner-curve-fit 0.0307 0.23 -10.8)) (molecular-weight (constant . 28.966)) (characteristic-vibrational-temperature (constant . 2686)) (lennard-jones-length (constant . 3.711)) (lennard-jones-energy (constant . 78.59999999999999)) (thermal-accom-coefficient (constant . 0.9137)) (velocity-accom-coefficient (constant . 0.9137)) (formation-entropy (constant . 194336)) (reference-temperature (constant . 298.15)) (critical-pressure (constant . 3758000.)) (critical-temperature (constant . 132.3)) (acentric-factor (constant . 0.033)) (critical-volume (constant . 0.002857)) (electric-conductivity (constant . 1e-09)) (therm-exp-coeff (constant . 0)) (speed-of-sound (none . #f))) (aluminum solid (chemical-formula . al) (density (constant . 2719)) (specific-heat (constant . 871) (polynomial nasa-9-piecewise-polynomial (200. 1000. 1542807. 5735.686 743.4314000000001 0.06124886 -7.495425e-05 4.740278e-08 -1.215476e-11) (1000. 6000. -9000630. 35984.76 726.2905 0.0238426 -4.71308e-06 -3.072811e-10 1.557189e-13) (6000. 20000. -155330700000. 117170100. -33352.98 4.774677 -0.0003297569 1.106924e-08 -1.447104e-13))) (atomic-number (constant . 13)) (thermal-conductivity (constant . 202.4)) (formation-entropy (constant . 164448.08)) (electric-conductivity (constant . 35410000.)) (magnetic-permeability (constant . 1.257e-06)) (struct-youngs-modulus (constant . 70000000000.)) (struct-poisson-ratio (constant . 0.32)))))
(partition/partition-count 2)
(partition/auto/mwp-cell-zone-info (97 10))
(parallel/nprocs_string "1")
(parallel/function "fluent 3ddp -r24.1   -ic=default -node -t1")
(case-config ((rp-seg? . #t) (rp-acoustics? . #f) (rp-optics? . #f) (rp-atm? . #f) (rp-axi? . #f) (rp-des? . #f) (rp-dpm-cache? . #f) (rp-dpm-cache-serial? . #f) (rp-unsteady? . #f) (rp-dual-time? . #f) (rp-amg? . #f) (rf-energy? . #t) (rp-hvac? . #f) (rp-inviscid? . #f) (rp-ke? . #f) (rp-kklw? . #f) (rp-kw? . #t) (rp-lam? . #f) (rp-les? . #f) (rp-structure? . #f) (rp-structure-damping? . #f) (rp-structure-linear? . #f) (rp-structure-nonlinear? . #f) (rp-structure-time? . #f) (rp-lsf? . #f) (rp-net? . #f) (rp-react? . #f) (rp-sa? . #f) (rp-sas? . #f) (rp-sge? . #f) (rp-spe? . #f) (rp-spe-part? . #f) (rp-potential? . #f) (rp-lithium? . #f) (rp-dual-potential? . #f) (rp-electrolysis? . #f) (rp-watercontent? . #f) (rp-electro-chem? . #f) (rp-spe-site? . #f) (rp-spe-surf? . #f) (rp-transition-model . none) (rp-trans-one-eqn? . #f) (rp-trans-sst? . #f) (rp-trb-scl? . #t) (rp-turb? . #t) (rp-absorbing-media? . #f) (rp-visc? . #t) (rp-v2f? . #f) (sg-cylindrical? . #f) (sg-disco? . #f) (sg-montecarlo? . #f) (sg-bee-gees? . #f) (sg-crev? . #f) (sg-dpm? . #f) (sg-dqmom-iem? . #f) (sg-dtrm? . #f) (sg-dynmesh? . #f) (sg-overset? . #f) (sg-ecfm? . #f) (sg-geqn? . #f) (sg-hg? . #f) (sg-inert? . #f) (sg-ignite? . #f) (sg-network? . #f) (sg-pcb? . #f) (sg-node-udm? . #f) (sg-noniterative? . #f) (sg-nox? . #f) (sg-melt? . #f) (sg-micro-mix? . #f) (sg-mphase? . #f) (sg-p1? . #f) (rp-sootspecies? . #f) (sg-par-premix? . #f) (sg-pb? . #f) (sg-pdf? . #f) (sg-pdf-transport? . #f) (sg-premixed? . #f) (sg-pull? . #f) (sg-rosseland? . #f) (sg-rsm? . #f) (sg-s2s? . #f) (sg-soot? . #f) (sg-sox? . #f) (sg-spark? . #f) (sg-swirl? . #f) (sg-twotemp? . #f) (sg-vbm? . #f) (sg-udm? . #f) (sg-uds? . #f) (sg-addon? . #f) (sg-addon-loaded? . #f) (rp-ablation? . #f) (sg-vfr? . #f) (sg-solar? . #f) (sg-wetsteam? . #f) (sg-moistair? . #f) (sg-wallfilm? . #f) (hyb-init? . #f) (rp-spe-surf-rc? . #f) (rp-3d? . #t) (rp-double? . #t) (rp-graphics? . #t) (rp-host? . #t) (rp-thread? . #f) (dpm-cache? . #t) (rp-wallfilm? . #t)))
(reference-thread 97)
(adapt/optim/swap/enable? #f)
(delta-time-sampled-dpm-volfrac 0.)
(idft/animation ((playback-write-video? . #f) (number-of-periods . 1) (time-steps-to-skip . 0) (object . "")))
(idft/signal ((mode . "") (dataset . "") (field . "")))
(statistics-time-steps (0.))
(delta-time-sampled-species (0.))
(recon/cell-lsf? #t)
(export/endvs/baseport 50055)
(cfd-post-mesh-info ((0 0 (fluid) (inlet1 velocity-inlet fluid) (inlet2 velocity-inlet fluid) (outlet pressure-outlet fluid) (wall wall fluid))))
(context/current-r17+ ("Pseudo Time Method Mode" "coupled-pseudo-transient" "default"))
(context/map-r17+ (("default" 0 (lambda () #t) (lambda () #f) #f) ("update derivatives after flow-solve" 90 (lambda () (rpgetvar 'context/auto-detect?)) (lambda () #t) (mom/update-derivatives-after-flow-solve? #t boolean #f #t #t)) ("turbulence models based on epsilon are first-order in space" 95 (lambda () (let* ((rpconf (%rp-config #f)) (sgmphs (cdr (assq 'sg-mphase? rpconf)))) (or (eq? sgmphs 'multi-fluid) (eq? sgmphs 'drift-flux) (eq? sgmphs 'homogeneous) (cdr (assq 'rp-ke? rpconf)) (cdr (assq 'rp-v2f? rpconf)) (and (cdr (assq 'rp-des? rpconf)) (rpgetvar 'des-rke-on?)) (and (cdr (assq 'sg-rsm? rpconf)) (not (drsm-omega-or-bsl-based?)) (rpgetvar 'drsm-tke-solve?))))) (lambda () #t) (k/scheme 0 integer #f 0 1 ("Changing Discretization Scheme for Turbulent Kinetic Energy:   ~a" (("First Order Upwind" . 0) ("Second Order Upwind" . 1) ("Power Law" . 2) ("Central Differencing" . 3) ("QUICK" . 4) ("Modified HRIC" . 5) ("Third-Order MUSCL" . 6) ("Bounded Central Differencing" . 7) ("CICSAM" . 8) ("Low Diffusion Second Order" . 9) ("Standard" . 10) ("Linear" . 11) ("Second Order" . 12) ("Body Force Weighted" . 13) ("PRESTO!" . 14) ("Continuity Based" . 15) ("Geo-Reconstruct" . 16) ("Donor-Acceptor" . 17) ("Modified Body Force Weighted" . 18) ("SIMPLE" . 20) ("SIMPLEC" . 21) ("PISO" . 22) ("Phase Coupled SIMPLE" . 23) ("Coupled" . 24) ("Fractional Step" . 25) ("Compressive" . 28) ("BGM" . 29) ("Phase Coupled PISO" . 30))))) ("RSM omega-based turbulence models are first-order in space" 97 (lambda () (let* ((rpconf (%rp-config #f)) (sgmphs (cdr (assq 'sg-mphase? rpconf)))) (or (eq? sgmphs 'multi-fluid) (eq? sgmphs 'drift-flux) (eq? sgmphs 'homogeneous) (and (cdr (assq 'sg-rsm? rpconf)) (drsm-omega-or-bsl-based?))))) (lambda () #t) (omega/scheme 0 integer #f 0 1 ("Changing Discretization Scheme for Specific Dissipation Rate:  ~a" (("First Order Upwind" . 0) ("Second Order Upwind" . 1) ("Power Law" . 2) ("Central Differencing" . 3) ("QUICK" . 4) ("Modified HRIC" . 5) ("Third-Order MUSCL" . 6) ("Bounded Central Differencing" . 7) ("CICSAM" . 8) ("Low Diffusion Second Order" . 9) ("Standard" . 10) ("Linear" . 11) ("Second Order" . 12) ("Body Force Weighted" . 13) ("PRESTO!" . 14) ("Continuity Based" . 15) ("Geo-Reconstruct" . 16) ("Donor-Acceptor" . 17) ("Modified Body Force Weighted" . 18) ("SIMPLE" . 20) ("SIMPLEC" . 21) ("PISO" . 22) ("Phase Coupled SIMPLE" . 23) ("Coupled" . 24) ("Fractional Step" . 25) ("Compressive" . 28) ("BGM" . 29) ("Phase Coupled PISO" . 30))))) ("pseudo-transient IF (single-phase) PBNS steady" 100 (lambda () (and (rpgetvar 'context/auto-detect?) (not (cdr (assq 'sg-mphase? (%rp-config #f)))) (cdr (assq 'rp-seg? (%rp-config #f))) (not (cdr (assq 'rp-unsteady? (%rp-config #f)))))) (lambda () #t) (pseudo-transient-formulation? #t boolean #f #t #f ("Pseudo transient formulation:                    ~a" (("enabled" . #t) ("disabled" . #f))))) ("NOT pseudo-transient IF (single-phase) transient" 120 (lambda () (and (rpgetvar 'context/auto-detect?) (not (cdr (assq 'sg-mphase? (%rp-config #f)))) (cdr (assq 'rp-unsteady? (%rp-config #f))))) (lambda () #t) (pseudo-transient-formulation? #f boolean #f #f #f ("Pseudo transient formulation:                    ~a" (("enabled" . #t) ("disabled" . #f))))) ("compr. enh. num. + press.-cpld. F cycle IF (single-phase) PBNS" 130 (lambda () (and (rpgetvar 'context/auto-detect?) (not (cdr (assq 'sg-mphase? (%rp-config #f)))) (cdr (assq 'rp-seg? (%rp-config #f))))) (lambda () #t) (compress/enhanced-numerics/on? #t boolean #f #t #t) (pressure-coupled/cycle-type 3 integer #f 3 3 ("Multigrid cycle type for the pressure coupled:   ~a" ((0 . "Flexible") (1 . "V-Cycle") (2 . "W-Cycle") (3 . "F-Cycle"))))) ("HOTR IF (single-phase) except PBNS Transient" 140 (lambda () (and (rpgetvar 'context/auto-detect?) (not (cdr (assq 'sg-mphase? (%rp-config #f)))) (not (and (cdr (assq 'rp-seg? (%rp-config #f))) (cdr (assq 'rp-unsteady? (%rp-config #f))))))) (lambda () #t) (recon/relax/relax? #t boolean #f #t #f ("HOTR:                                            ~a" (("enabled" . #t) ("disabled" . #f))))) ("coupled IF (single-phase) PBNS steady" 150 (lambda () (and (rpgetvar 'context/auto-detect?) (not (cdr (assq 'sg-mphase? (%rp-config #f)))) (cdr (assq 'rp-seg? (%rp-config #f))) (not (cdr (assq 'rp-unsteady? (%rp-config #f)))))) (lambda () #t) (density/relax 0.5 real #f 0.5 1 ("Under-Relaxation Factor for density              ~a")) (density/pseudo-relax 0.5 real #f 0.5 1.) (flow/scheme 24 integer #f 24 20 ("P-V coupling method:                             ~a" (("SIMPLE" . 20) ("SIMPLEC" . 21) ("PISO" . 22) ("Fractional Step" . 25) ("Coupled" . 24) ("Phase Coupled SIMPLE" . 23) ("Phase Coupled PISO" . 30))))) ("simpleC IF (single-phase) PBNS transient" 170 (lambda () (and (rpgetvar 'context/auto-detect?) (not (cdr (assq 'sg-mphase? (%rp-config #f)))) (cdr (assq 'rp-seg? (%rp-config #f))) (cdr (assq 'rp-unsteady? (%rp-config #f))))) (lambda () #t) (pressure/relax 0.8 real #f 0.8 0.3 ("Under-Relaxation Factor for pressure:            ~a")) (mom/relax 0.7 real #f 0.7 0.7 ("Under-Relaxation Factor for momentum:            ~a")) (simplec/skew-iter 1 integer #f 1 0 ("Skewness Correction for SIMPLEC                  ~a")) (density/relax 1 real #f 1 1 ("Under-Relaxation Factor for density              ~a")) (density/pseudo-relax 1 real #f 1 1.) (pressure-coupled/courant-number 10000000000. real #f 10000000000. 200. ("CFL number for the coupled flow equation system: ~a")) (flow/scheme 21 integer #f 21 20 ("P-V coupling method:                             ~a" (("SIMPLE" . 20) ("SIMPLEC" . 21) ("PISO" . 22) ("Fractional Step" . 25) ("Coupled" . 24) ("Phase Coupled SIMPLE" . 23) ("Phase Coupled PISO" . 30))))) ("impl. Cou. num. IF (single-phase) DBNS incompressible" 180 (lambda () (and (rpgetvar 'context/auto-detect?) (not (cdr (assq 'sg-mphase? (%rp-config #f)))) (not (cdr (assq 'rp-seg? (%rp-config #f)))) (not (is-compressible?)))) (lambda () #t) (courant-number/implicit 1000 real #f 1000 5. ("CFL value for the implicit dbns coupled solver:  ~a"))) ("impl. Cou. num. IF (single-phase) DBNS transient compressible" 200 (lambda () (and (rpgetvar 'context/auto-detect?) (not (cdr (assq 'sg-mphase? (%rp-config #f)))) (not (cdr (assq 'rp-seg? (%rp-config #f)))) (cdr (assq 'rp-unsteady? (%rp-config #f))) (is-compressible?))) (lambda () #t) (courant-number/implicit 50 real #f 50 5. ("CFL value for the implicit dbns coupled solver:  ~a"))) ("PRESTO! IF (single-phase) PBNS steady buoyant OR swirl" 210 (lambda () (and (rpgetvar 'context/auto-detect?) (not (cdr (assq 'sg-mphase? (%rp-config #f)))) (cdr (assq 'rp-seg? (%rp-config #f))) (not (cdr (assq 'rp-unsteady? (%rp-config #f)))) (or (and (cdr (assq 'rp-axi? (%rp-config #f))) (cdr (assq 'sg-swirl? (%rp-config #f)))) (have-boussinesq?)))) (lambda () #t) (pressure/scheme 14 integer #f 14 12 ("Spatial discretization for pressure:             ~a" (("First Order Upwind" . 0) ("Second Order Upwind" . 1) ("Power Law" . 2) ("Central Differencing" . 3) ("QUICK" . 4) ("Modified HRIC" . 5) ("Third-Order MUSCL" . 6) ("Bounded Central Differencing" . 7) ("CICSAM" . 8) ("Low Diffusion Second Order" . 9) ("Standard" . 10) ("Linear" . 11) ("Second Order" . 12) ("Body Force Weighted" . 13) ("PRESTO!" . 14) ("Continuity Based" . 15) ("Geo-Reconstruct" . 16) ("Donor-Acceptor" . 17) ("Modified Body Force Weighted" . 18) ("SIMPLE" . 20) ("SIMPLEC" . 21) ("PISO" . 22) ("Phase Coupled SIMPLE" . 23) ("Coupled" . 24) ("Fractional Step" . 25) ("Compressive" . 28) ("BGM" . 29) ("Phase Coupled PISO" . 30))))) ("PRESTO! IF sing.-eq. multi-phase" 230 (lambda () (and (rpgetvar 'context/auto-detect?) (let ((sgm (cdr (assq 'sg-mphase? (%rp-config #f))))) (not (eq? sgm #f))))) (lambda () #t) (pressure/scheme 14 integer #f 14 12 ("Spatial discretization for pressure:             ~a" (("First Order Upwind" . 0) ("Second Order Upwind" . 1) ("Power Law" . 2) ("Central Differencing" . 3) ("QUICK" . 4) ("Modified HRIC" . 5) ("Third-Order MUSCL" . 6) ("Bounded Central Differencing" . 7) ("CICSAM" . 8) ("Low Diffusion Second Order" . 9) ("Standard" . 10) ("Linear" . 11) ("Second Order" . 12) ("Body Force Weighted" . 13) ("PRESTO!" . 14) ("Continuity Based" . 15) ("Geo-Reconstruct" . 16) ("Donor-Acceptor" . 17) ("Modified Body Force Weighted" . 18) ("SIMPLE" . 20) ("SIMPLEC" . 21) ("PISO" . 22) ("Phase Coupled SIMPLE" . 23) ("Coupled" . 24) ("Fractional Step" . 25) ("Compressive" . 28) ("BGM" . 29) ("Phase Coupled PISO" . 30))))) ("Flow: transient; DPM: coupled" 10 (lambda () (and (cdr (assq 'rp-unsteady? (%rp-config #f))) (cdr (assq 'sg-dpm? (%rp-config #f))))) (lambda () (or (cdr (assq 'sg-dpm? (%rp-config #f))) (dpm-bcs-available?))) (dpm/sources-every-flow-iteration? #t boolean #f #t #f ("Update DPM source terms every flow iteration?:   ~a" (("enabled" . #t) ("disabled" . #f))))) ("Flow: transient; DPM: unsteady, coupled" 12 (lambda () (and (cdr (assq 'sg-dpm? (%rp-config #f))) (and (cdr (assq 'rp-unsteady? (%rp-config #f))) (rpgetvar 'dpm/unsteady-tracking?)))) (lambda () (or (cdr (assq 'sg-dpm? (%rp-config #f))) (dpm-bcs-available?))) (dpm/relax 0.9 real #f 0.9 0.5 ("DPM source terms under-relaxation factor:        ~a"))) ("DPM: Unsteady" 14 (lambda () (rpgetvar 'dpm/unsteady-tracking?)) (lambda () (or (cdr (assq 'sg-dpm? (%rp-config #f))) (dpm-bcs-available?))) (dpm/max-steps 500 integer #f 500 50000 ("DPM maximum number of steps:                     ~a"))) ("DPM: barycentric interpolation of density and viscosity in multi-phase context" 100 (lambda () (cdr (assq 'sg-mphase? (%rp-config #f)))) (lambda () (and (rpgetvar 'dpm/variable-interpolation/barycentric?) (or (cdr (assq 'sg-dpm? (%rp-config #f))) (dpm-bcs-available?)))) (density/interpolate #t boolean #f #t #f ("Spatial interpolation for density:               ~a" (("enabled" . #t) ("disabled" . #f)))) (laminar-viscosity/interpolate #t boolean #f #t #f ("Spatial interpolation for laminar viscosity:     ~a" (("enabled" . #t) ("disabled" . #f))))) ("VOF: Implicit and Steady State" 16 (lambda () (and (eq? (cdr (assq 'sg-mphase? (%rp-config #f))) 'vof) (not (cdr (assq 'rp-unsteady? (%rp-config #f)))) (eqv? (rpgetvar 'mp/scheme-type) 0))) (lambda () #t) (flow/scheme 24 integer #f 24 20 ("P-V coupling method:                             ~a" (("SIMPLE" . 20) ("SIMPLEC" . 21) ("PISO" . 22) ("Fractional Step" . 25) ("Coupled" . 24) ("Phase Coupled SIMPLE" . 23) ("Phase Coupled PISO" . 30)))) (pseudo-transient-formulation? #t boolean #f #t #f ("Pseudo transient for steady state VOF:           ~a" (("enabled" . #t) ("disabled" . #f))))) ("Wall Film: EWF with DPM collection" 18 (lambda () (if (and (rp-3d?) (cdr (assq 'rp-wallfilm? (%rp-config #f)))) (and (cdr (assq 'sg-wallfilm? (%rp-config #f))) (dpm-bcs-available?)) #f)) (lambda () (if (and (rp-3d?) (cdr (assq 'rp-wallfilm? (%rp-config #f)))) (let* ((film-vars (rpgetvar 'wall-film/model-parameters)) (dpm-collection? (cdr (assq 'dpm-collection? film-vars))) (dpm-splashing? (cdr (assq 'dpm-splashing? film-vars))) (sg-wallfilm? (cdr (assq 'sg-wallfilm? (%rp-config #f))))) (or (not sg-wallfilm?) (and dpm-collection? dpm-splashing?))) #f)) (dpm/orourke-splash-fraction? #f boolean #f #f #t ("O'Rourke splash fraction formulation:            ~a" (("enabled" . #t) ("disabled" . #f)))) (dpm/splash-pdf-tail-limiting? #f boolean #f #f #t ("Splash PDF distribution tail limiting:           ~a" (("enabled" . #t) ("disabled" . #f))))) ("MP: NITA defaults" 20 (lambda () (and (equal? (cdr (assq 'sg-mphase? (%rp-config #f))) 'multi-fluid) (eqv? (rpgetvar 'flow/scheme) 23) (cdr (assq 'sg-noniterative? (%rp-config #f))))) (lambda () #f) (piso/neighbor-option 1 integer #f 1 0 ("Piso neighbor option:                            ~a")) (piso/neighbor-add-option 1 integer #f 1 0 ("Piso neighbor add option:                        ~a")) (piso/neighbor-iter 2 integer #f 2 1 ("Piso neighbor iterations:                        ~a")) (mp/vof-piso-corrector? #t boolean #f #t #f ("Multiphase Piso vof corrector:                   ~a" (("enabled" . #t) ("disabled" . #f))))) ("MP: NITA defaults r182a" 22 (lambda () (and (equal? (cdr (assq 'sg-mphase? (%rp-config #f))) 'multi-fluid) (eqv? (rpgetvar 'flow/scheme) 23) (cdr (assq 'sg-noniterative? (%rp-config #f))))) (lambda () #f) (pressure/max-iter 0 integer #f 0 10 ("Pressure skewness correction:                    ~a"))) ("MP: NITA defaults r190" 26 (lambda () (and (equal? (cdr (assq 'sg-mphase? (%rp-config #f))) 'multi-fluid) (eqv? (rpgetvar 'flow/scheme) 23) (cdr (assq 'sg-noniterative? (%rp-config #f))) (eqv? (rpgetvar 'mp/scheme-type) 0))) (lambda () #f) (mp/max-iter 1 integer #f 1 5 ("Max. no. of MP NITA sub iterations:              ~a"))) ("MP: NITA: override mp/max-iter from 'defaults r190' with higher number if mp/vof-piso-corrector is Off" 30 (lambda () (and (equal? (cdr (assq 'sg-mphase? (%rp-config #f))) 'multi-fluid) (eqv? (rpgetvar 'flow/scheme) 23) (cdr (assq 'sg-noniterative? (%rp-config #f))) (eqv? (rpgetvar 'mp/scheme-type) 0) (not (rpgetvar 'mp/vof-piso-corrector?)))) (lambda () #f) (mp/max-iter 5 integer #f 5 5 ("Max. no. of MP NITA sub iterations:              ~a"))) ("MP: NITA defaults r192" 27 (lambda () (and (equal? (cdr (assq 'sg-mphase? (%rp-config #f))) 'multi-fluid) (eqv? (rpgetvar 'flow/scheme) 23) (cdr (assq 'sg-noniterative? (%rp-config #f))))) (lambda () #f) (pressure/explicit-relax 0.5 real #f 0.5 1 ("Explicit Relaxation Factor for Pressure:         ~a")) (mom/explicit-relax 0.7 real #f 0.7 1. ("Explicit Relaxation Factor for Momentum:         ~a"))) ("DPM with NITA" 24 (lambda () (cdr (assq 'sg-noniterative? (%rp-config #f)))) (lambda () (and (cdr (assq 'sg-dpm? (%rp-config #f))) (dpm-bcs-available?))) (dpm/relax 1. real #f 1. 0.5 ("DPM source term under-relaxation factor:         ~a"))) ("Aggressive NITA" 240 (lambda () (and (cdr (assq 'sg-noniterative? (%rp-config #f))) (rpgetvar 'nita/aggressive?) (not (equal? (cdr (assq 'sg-mphase? (%rp-config #f))) 'multi-fluid)))) (lambda () #f) (pressure/max-iter 0 integer #f 0 10 ("Max. no. of Pressure NITA sub iterations:             ~a")) (mom/max-iter 1 integer #f 1 5 ("Max. no. of Momentum NITA sub iterations:             ~a")) (temperature/max-iter 1 integer #f 1 5 ("Max. no. of Temperature NITA sub iterations:          ~a")) (enthalpy/max-iter 1 integer #f 1 5 ("Max. no. of Enthalpy sub iterations:                  ~a")) (mp/max-iter 1 integer #f 1 5 ("Max. no. of Multiphase NITA sub iterations:           ~a")) (potential/max-iter 1 integer #f 1 5 ("Max. no. of Potential NITA sub iterations:            ~a")) (dqmom-iem/max-iter 1 integer #f 1 5 ("Max. no. of DQMOM NITA sub iterations:                ~a")) (granular-temperature/max-iter 1 integer #f 1 5 ("Max. no. of Granular-Temperature NITA sub iterations: ~a")) (w-swirl/max-iter 1 integer #f 1 5 ("Max. no. of Swirl NITA sub iterations:                ~a")) (nut/max-iter 1 integer #f 1 5 ("Max. no. of Turbulence(NU) NITA sub iterations:       ~a")) (k/max-iter 1 integer #f 1 5 ("Max. no. of Turbulence(K) NITA sub iterations:        ~a")) (epsilon/max-iter 1 integer #f 1 5 ("Max. no. of Turbulence(Epsilon) NITA sub iterations:  ~a")) (v2/max-iter 1 integer #f 1 5 ("Max. no. of Turbulence(V2) NITA sub iterations:       ~a")) (f/max-iter 1 integer #f 1 5 ("Max. no. of Turbulence(f) NITA sub iterations:        ~a")) (kl/max-iter 1 integer #f 1 5 ("Max. no. of Turbulence(kl) NITA sub iterations:       ~a")) (omega/max-iter 1 integer #f 1 5 ("Max. no. of Turbulence(Omega) NITA sub iterations:    ~a")) (intermit/max-iter 1 integer #f 1 5 ("Max. no. of Turbulence(Intermit) NITA sub iterations: ~a")) (retheta/max-iter 1 integer #f 1 5 ("Max. no. of Turbulence(retheta) NITA sub iterations:  ~a")) (drsm/max-iter 1 integer #f 1 5 ("Max. no. of Turbulence(drsm) NITA sub iterations:     ~a")) (fmean/max-iter 1 integer #f 1 5 ("Max. no. of fmean NITA sub iterations:                ~a")) (fmean2/max-iter 1 integer #f 1 5 ("Max. no. of fmean2 NITA sub iterations:               ~a")) (fvar/max-iter 1 integer #f 1 5 ("Max. no. of fvar NITA sub iterations:                 ~a")) (fvar2/max-iter 1 integer #f 1 5 ("Max. no. of fvar2 NITA sub iterations:                ~a")) (premixc/max-iter 1 integer #f 1 5 ("Max. no. of Premix NITA sub iterations:               ~a")) (premix-g-eqn/max-iter 1 integer #f 1 5 ("Max. no. of Premix-G-Eq NITA sub iterations:          ~a")) (premix-g-var/max-iter 1 integer #f 1 5 ("Max. no. of Premix-G-Var NITA sub iterations:         ~a")) (pdftss/max-iter 1 integer #f 1 5 ("Max. no. of PDF-tss NITA sub iterations:              ~a")) (pull/max-iter 1 integer #f 1 5 ("Max. no. of Pollutant NITA sub iterations:            ~a")) (soot-mom/max-iter 1 integer #f 1 5 ("Max. no. of Soots NITA sub iterations:                ~a")) (tvar/max-iter 1 integer #f 1 5 ("Max. no. of Tvar NITA sub iterations:                 ~a")) (pressure/amg-alpha 0.01 real #f 0.01 0.1 ("Multigrid termination for the pressure:               ~a")) (pressure/cycle-type 3 integer #f 3 1 ("Multigrid cycle type for the pressure:                ~a" ((0 . "Flexible") (1 . "V-Cycle") (2 . "W-Cycle") (3 . "F-Cycle")))) (flow/scheme 25 integer #f 25 20 ("Flow Scheme is:                                       ~a" (("SIMPLE" . 20) ("SIMPLEC" . 21) ("PISO" . 22) ("Fractional Step" . 25) ("Coupled" . 24) ("Phase Coupled SIMPLE" . 23) ("Phase Coupled PISO" . 30)))) (nita/flux/extrapolate? #t boolean #f #t #f ("Mass flux extrapolation:                              ~a" (("enabled" . #t) ("disabled" . #f))))) ("constant density NITA" 241 (lambda () (and (cdr (assq 'sg-noniterative? (%rp-config #f))) (eqv? (rpgetvar 'nita/single-phase/hybrid/option) 1) (not (cdr (assq 'sg-mphase? (%rp-config #f)))))) (lambda () #t) (pressure/max-iter 0 integer #f 0 10 ("Max. no. of Pressure NITA sub iterations:             ~a")) (mom/max-iter 1 integer #f 1 5 ("Max. no. of Momentum NITA sub iterations:             ~a")) (temperature/max-iter 1 integer #f 1 5 ("Max. no. of Temperature NITA sub iterations:          ~a")) (enthalpy/max-iter 1 integer #f 1 5 ("Max. no. of Enthalpy sub iterations:                  ~a")) (w-swirl/max-iter 1 integer #f 1 5 ("Max. no. of Swirl NITA sub iterations:                ~a")) (nut/max-iter 1 integer #f 1 5 ("Max. no. of Turbulence(NU) NITA sub iterations:       ~a")) (k/max-iter 1 integer #f 1 5 ("Max. no. of Turbulence(K) NITA sub iterations:        ~a")) (epsilon/max-iter 1 integer #f 1 5 ("Max. no. of Turbulence(Epsilon) NITA sub iterations:  ~a")) (v2/max-iter 1 integer #f 1 5 ("Max. no. of Turbulence(V2) NITA sub iterations:       ~a")) (f/max-iter 1 integer #f 1 5 ("Max. no. of Turbulence(f) NITA sub iterations:        ~a")) (kl/max-iter 1 integer #f 1 5 ("Max. no. of Turbulence(kl) NITA sub iterations:       ~a")) (omega/max-iter 1 integer #f 1 5 ("Max. no. of Turbulence(Omega) NITA sub iterations:    ~a")) (intermit/max-iter 1 integer #f 1 5 ("Max. no. of Turbulence(Intermit) NITA sub iterations: ~a")) (retheta/max-iter 1 integer #f 1 5 ("Max. no. of Turbulence(retheta) NITA sub iterations:  ~a")) (drsm/max-iter 1 integer #f 1 5 ("Max. no. of Turbulence(drsm) NITA sub iterations:     ~a")) (fmean/max-iter 1 integer #f 1 5 ("Max. no. of fmean NITA sub iterations:                ~a")) (fmean2/max-iter 1 integer #f 1 5 ("Max. no. of fmean2 NITA sub iterations:               ~a")) (fvar/max-iter 1 integer #f 1 5 ("Max. no. of fvar NITA sub iterations:                 ~a")) (fvar2/max-iter 1 integer #f 1 5 ("Max. no. of fvar2 NITA sub iterations:                ~a")) (premixc/max-iter 1 integer #f 1 5 ("Max. no. of Premix NITA sub iterations:               ~a")) (premix-g-eqn/max-iter 1 integer #f 1 5 ("Max. no. of Premix-G-Eq NITA sub iterations:          ~a")) (premix-g-var/max-iter 1 integer #f 1 5 ("Max. no. of Premix-G-Var NITA sub iterations:         ~a")) (pdftss/max-iter 1 integer #f 1 5 ("Max. no. of PDF-tss NITA sub iterations:              ~a")) (pull/max-iter 1 integer #f 1 5 ("Max. no. of Pollutant NITA sub iterations:            ~a")) (soot-mom/max-iter 1 integer #f 1 5 ("Max. no. of Soots NITA sub iterations:                ~a")) (tvar/max-iter 1 integer #f 1 5 ("Max. no. of Tvar NITA sub iterations:                 ~a")) (pressure/cycle-type 3 integer #f 3 1 ("Multigrid cycle type for the pressure:                ~a" ((0 . "Flexible") (1 . "V-Cycle") (2 . "W-Cycle") (3 . "F-Cycle")))) (pressure/amg-alpha 0.01 real #f 0.01 0.1 ("Multigrid termination for the pressure:               ~a")) (mom/residual-tolerance 0.001 real #f 0.001 0.0001 ("Residual-tolerance for momentum:                 ~a")) (pressure/residual-tolerance 0.01 real #f 0.01 0.0001 ("Residual-tolerance for pressure:                 ~a")) (temperature/residual-tolerance 0.001 real #f 0.001 0.0001 ("Residual-tolerance for temperature:              ~a")) (enthalpy/residual-tolerance 0.001 real #f 0.001 0.0001 ("Residual-tolerance for enthalpy:                 ~a")) (w-swirl/residual-tolerance 0.001 real #f 0.001 0.0001 ("Residual-tolerance for w-swirl:                  ~a")) (nut/residual-tolerance 0.001 real #f 0.001 0.0001 ("Residual-tolerance for turbulence (nu):          ~a")) (k/residual-tolerance 0.001 real #f 0.001 0.0001 ("Residual-tolerance for turbulence (k):           ~a")) (epsilon/residual-tolerance 0.001 real #f 0.001 0.0001 ("Residual-tolerance for turbulence (epsilon):     ~a")) (v2/residual-tolerance 0.001 real #f 0.001 0.0001 ("Residual-tolerance for turbulence (V2):          ~a")) (f/residual-tolerance 0.001 real #f 0.001 0.0001 ("Residual-tolerance for turbulence (f):           ~a")) (kl/residual-tolerance 0.001 real #f 0.001 0.0001 ("Residual-tolerance for turbulence (kl):          ~a")) (omega/residual-tolerance 0.001 real #f 0.001 0.0001 ("Residual-tolerance for turbulence (Omega):       ~a")) (intermit/residual-tolerance 0.001 real #f 0.001 0.0001 ("Residual-tolerance for turbulence (Intermit):    ~a")) (retheta/residual-tolerance 0.001 real #f 0.001 0.0001 ("Residual-tolerance for turbulence (retheta):     ~a")) (drsm/residual-tolerance 0.001 real #f 0.001 0.0001 ("Residual-tolerance for turbulence (drsm):       ~a")) (flow/scheme 25 integer #f 25 20 ("Flow Scheme is:                                       ~a" (("SIMPLE" . 20) ("SIMPLEC" . 21) ("PISO" . 22) ("Fractional Step" . 25) ("Coupled" . 24) ("Phase Coupled SIMPLE" . 23) ("Phase Coupled PISO" . 30)))) (nita/flux/extrapolate? #t boolean #f #t #f ("Mass flux extrapolation:                              ~a" (("enabled" . #t) ("disabled" . #f)))) (nita/residual-tolerance/iter 2 integer #f 2 1 ("Number of iterations with residual-tolerance:         ~a")) (nita/outer-iter 2 integer #f 2 1 ("Max. no. of outer iterations:                         ~a")) (mom/relax 1 real #f 1 0.7 ("Under-relaxation for momentum             ~a")) (pressure/relax 1 real #f 1 0.3 ("Under-relaxation for pressure             ~a")) (w-swirl/relax 1 real #f 1 0.9 ("Under-relaxation for swirl                ~a")) (nut/relax 1 real #f 1 0.8 ("Under-relaxation for turbulence(nut)      ~a")) (k/relax 1 real #f 1 0.8 ("Under-relaxation for turbulence(k)        ~a")) (epsilon/relax 1 real #f 1 0.8 ("Under-relaxation for turbulence(epsilon)  ~a")) (v2/relax 1 real #f 1 0.8 ("Under-relaxation for turbulence(v2)       ~a")) (f/relax 1 real #f 1 0.8 ("Under-relaxation for turbulence(f)        ~a")) (kl/relax 1 real #f 1 0.8 ("Under-relaxation for turbulence(kl)       ~a")) (omega/relax 1 real #f 1 0.8 ("Under-relaxation for turbulence(omega)    ~a")) (intermit/relax 1 real #f 1 0.8 ("Under-relaxation for turbulence(intermit) ~a")) (retheta/relax 1 real #f 1 0.8 ("Under-relaxation for turbulence(retheta)  ~a")) (drsm/relax 1 real #f 1 0.5 ("Under-relaxation for turbulence(dtrsm)    ~a"))) ("variable density NITA" 242 (lambda () (and (cdr (assq 'sg-noniterative? (%rp-config #f))) (eqv? (rpgetvar 'nita/single-phase/hybrid/option) 2) (not (cdr (assq 'sg-mphase? (%rp-config #f)))))) (lambda () #t) (pressure/max-iter 0 integer #f 0 10 ("Max. no. of Pressure NITA sub iterations:             ~a")) (mom/max-iter 1 integer #f 1 5 ("Max. no. of Momentum NITA sub iterations:             ~a")) (temperature/max-iter 1 integer #f 1 5 ("Max. no. of Temperature NITA sub iterations:          ~a")) (enthalpy/max-iter 1 integer #f 1 5 ("Max. no. of Enthalpy sub iterations:                  ~a")) (species/max-iter (1) integer-list #f (1) (5) ("Max. no. of Species  sub iterations:                  ~a")) (w-swirl/max-iter 1 integer #f 1 5 ("Max. no. of Swirl NITA sub iterations:                ~a")) (nut/max-iter 1 integer #f 1 5 ("Max. no. of Turbulence(NU) NITA sub iterations:       ~a")) (k/max-iter 1 integer #f 1 5 ("Max. no. of Turbulence(K) NITA sub iterations:        ~a")) (epsilon/max-iter 1 integer #f 1 5 ("Max. no. of Turbulence(Epsilon) NITA sub iterations:  ~a")) (v2/max-iter 1 integer #f 1 5 ("Max. no. of Turbulence(V2) NITA sub iterations:       ~a")) (f/max-iter 1 integer #f 1 5 ("Max. no. of Turbulence(f) NITA sub iterations:        ~a")) (kl/max-iter 1 integer #f 1 5 ("Max. no. of Turbulence(kl) NITA sub iterations:       ~a")) (omega/max-iter 1 integer #f 1 5 ("Max. no. of Turbulence(Omega) NITA sub iterations:    ~a")) (intermit/max-iter 1 integer #f 1 5 ("Max. no. of Turbulence(Intermit) NITA sub iterations: ~a")) (retheta/max-iter 1 integer #f 1 5 ("Max. no. of Turbulence(retheta) NITA sub iterations:  ~a")) (drsm/max-iter 1 integer #f 1 5 ("Max. no. of Turbulence(drsm) NITA sub iterations:     ~a")) (fmean/max-iter 1 integer #f 1 5 ("Max. no. of fmean NITA sub iterations:                ~a")) (fmean2/max-iter 1 integer #f 1 5 ("Max. no. of fmean2 NITA sub iterations:               ~a")) (fvar/max-iter 1 integer #f 1 5 ("Max. no. of fvar NITA sub iterations:                 ~a")) (fvar2/max-iter 1 integer #f 1 5 ("Max. no. of fvar2 NITA sub iterations:                ~a")) (premixc/max-iter 1 integer #f 1 5 ("Max. no. of Premix NITA sub iterations:               ~a")) (premix-g-eqn/max-iter 1 integer #f 1 5 ("Max. no. of Premix-G-Eq NITA sub iterations:          ~a")) (premix-g-var/max-iter 1 integer #f 1 5 ("Max. no. of Premix-G-Var NITA sub iterations:         ~a")) (pdftss/max-iter 1 integer #f 1 5 ("Max. no. of PDF-tss NITA sub iterations:              ~a")) (pull/max-iter 1 integer #f 1 5 ("Max. no. of Pollutant NITA sub iterations:            ~a")) (soot-mom/max-iter 1 integer #f 1 5 ("Max. no. of Soots NITA sub iterations:                ~a")) (tvar/max-iter 1 integer #f 1 5 ("Max. no. of Tvar NITA sub iterations:                 ~a")) (pressure/cycle-type 3 integer #f 3 1 ("Multigrid cycle type for the pressure:                ~a" ((0 . "Flexible") (1 . "V-Cycle") (2 . "W-Cycle") (3 . "F-Cycle")))) (pressure/amg-alpha 0.01 real #f 0.01 0.1 ("Multigrid termination for the pressure       :        ~a")) (mom/residual-tolerance 0.001 real #f 0.001 0.0001 ("Residual-tolerance for momentum:                 ~a")) (pressure/residual-tolerance 0.01 real #f 0.01 0.0001 ("Residual-tolerance for pressure:                 ~a")) (temperature/residual-tolerance 0.001 real #f 0.001 0.0001 ("Residual-tolerance for temperature:              ~a")) (enthalpy/residual-tolerance 0.001 real #f 0.001 0.0001 ("Residual-tolerance for enthalpy:                 ~a")) (w-swirl/residual-tolerance 0.001 real #f 0.001 0.0001 ("Residual-tolerance for w-swirl:                  ~a")) (nut/residual-tolerance 0.001 real #f 0.001 0.0001 ("Residual-tolerance for turbulence (nu):          ~a")) (k/residual-tolerance 0.001 real #f 0.001 0.0001 ("Residual-tolerance for turbulence (k):           ~a")) (epsilon/residual-tolerance 0.001 real #f 0.001 0.0001 ("Residual-tolerance for turbulence (epsilon):     ~a")) (v2/residual-tolerance 0.001 real #f 0.001 0.0001 ("Residual-tolerance for turbulence (V2):          ~a")) (f/residual-tolerance 0.001 real #f 0.001 0.0001 ("Residual-tolerance for turbulence (f):           ~a")) (kl/residual-tolerance 0.001 real #f 0.001 0.0001 ("Residual-tolerance for turbulence (kl):          ~a")) (omega/residual-tolerance 0.001 real #f 0.001 0.0001 ("Residual-tolerance for turbulence (Omega):       ~a")) (intermit/residual-tolerance 0.001 real #f 0.001 0.0001 ("Residual-tolerance for turbulence (Intermit):    ~a")) (retheta/residual-tolerance 0.001 real #f 0.001 0.0001 ("Residual-tolerance for turbulence (retheta):     ~a")) (drsm/residual-tolerance 0.001 real #f 0.001 0.0001 ("Residual-tolerance for turbulence (drsm):        ~a")) (species/residual-tolerance (0.001) real-list #f (0.001) (0.0001) ("Residual-tolerance for species:                  ~a")) (potential/residual-tolerance 0.001 real #f 0.001 1e-06 ("Residual-tolerance for potential:                ~a")) (dqmom-iem/residual-tolerance 0.001 real #f 0.001 0.0001 ("Residual-tolerance for DQMOM:                    ~a")) (fmean/residual-tolerance 0.001 real #f 0.001 0.0001 ("Residual-tolerance for fmean:                    ~a")) (fmean2/residual-tolerance 0.001 real #f 0.001 0.0001 ("Residual-tolerance for fmean2:                   ~a")) (fvar/residual-tolerance 0.001 real #f 0.001 0.0001 ("Residual-tolerance for fvar:                     ~a")) (fvar2/residual-tolerance 0.001 real #f 0.001 0.0001 ("Residual-tolerance for fvar2:                    ~a")) (premixc/residual-tolerance 0.001 real #f 0.001 0.0001 ("Residual-tolerance for premixc:                  ~a")) (pdftss/residual-tolerance 0.001 real #f 0.001 0.0001 ("Residual-tolerance for pdftss:                   ~a")) (pull/residual-tolerance 0.001 real #f 0.001 0.0001 ("Residual-tolerance for pull:                     ~a")) (soot-mom/residual-tolerance 0.001 real #f 0.001 0.0001 ("Residual-tolerance for soot-mom:                 ~a")) (tvar/residual-tolerance 0.001 real #f 0.001 0.0001 ("Residual-tolerance for tvar:                     ~a")) (premix-g-eqn/residual-tolerance 0.001 real #f 0.001 0.0001 ("Residual-tolerance for premix-g-eqn:            ~a")) (premix-g-var/residual-tolerance 0.001 real #f 0.001 0.0001 ("Residual-tolerance for premix-g-var:            ~a")) (flow/scheme 25 integer #f 25 20 ("Flow Scheme is:                                       ~a" (("SIMPLE" . 20) ("SIMPLEC" . 21) ("PISO" . 22) ("Fractional Step" . 25) ("Coupled" . 24) ("Phase Coupled SIMPLE" . 23) ("Phase Coupled PISO" . 30)))) (nita/flux/extrapolate? #f boolean #f #f #f ("Mass flux extrapolation:                              ~a" (("enabled" . #t) ("disabled" . #f)))) (nita/outer-iter 10 integer #f 10 1 ("Max. no. of outer iterations:                         ~a")) (models/equation-order 1 integer #f 1 0 ("Changing equation order                               ~a" (("Standard" . 0) ("Optimized-for-volumetric-expansion" . 1)))) (density/relax 0.75 real #f 0.75 1 ("Under-Relaxation Factor for density                   ~a")) (dpm/relax 0.75 real #f 0.75 0.5 ("DPM source terms under-relaxation factor:             ~a")) (fvar/relax 0.9 real #f 0.9 0.9 ("Under-relaxation factor for mean-fraction             ~a")) (mom/relax 0.75 real #f 0.75 0.7 ("Under-Relaxation Factor for momentum                 ~a")) (premixc/relax 0.9 real #f 0.9 0.9 ("Under-relaxation factor for premix-c                  ~a")) (pressure/relax 0.75 real #f 0.75 0.3 ("Under-Relaxation Factor for pressure  ~a"))) ("Multi Phase PISO" 32 (lambda () (and (equal? (cdr (assq 'sg-mphase? (%rp-config #f))) 'multi-fluid) (eqv? (rpgetvar 'flow/scheme) 30))) (lambda () #f) (pressure/max-iter 0 integer #f 0 10 ("Pressure skewness correction:         ~a")) (piso/coupling? #f boolean #f #f #t ("Skewness neighbor coupling:           ~a"))) ("Fast Transient SIMPLEC" 243 (lambda () (and (or (cdr (assq 'sg-pdf? (%rp-config #f))) (cdr (assq 'sg-par-premix? (%rp-config #f)))) (cdr (assq 'rp-unsteady? (%rp-config #f))) (not (cdr (assq 'sg-noniterative? (%rp-config #f)))) (rpgetvar 'pdf/activate-ft-simplec?))) (lambda () #f) (models/equation-order 1 integer #f 1 0 ("Equation order:                              ~a" (("Standard" . 0) ("Optimized-for-volumetric-expansion" . 1)))) (flow/scheme 21 integer #f 21 20 ("P-V coupling method is:                      ~a" (("SIMPLE" . 20) ("SIMPLEC" . 21) ("PISO" . 22) ("Fractional Step" . 25) ("Coupled" . 24) ("Phase Coupled SIMPLE" . 23) ("Phase Coupled PISO" . 30)))) (pressure/cycle-type 3 integer #f 3 1 ("AMG cycle type for pressure equation:          ~a" ((0 . "Flexible") (1 . "V-Cycle") (2 . "W-Cycle") (3 . "F-Cycle")))) (pressure/scheme 12 integer #f 12 12 ("Pressure discretization scheme:                ~a" (("First Order Upwind" . 0) ("Second Order Upwind" . 1) ("Power Law" . 2) ("Central Differencing" . 3) ("QUICK" . 4) ("Modified HRIC" . 5) ("Third-Order MUSCL" . 6) ("Bounded Central Differencing" . 7) ("CICSAM" . 8) ("Low Diffusion Second Order" . 9) ("Standard" . 10) ("Linear" . 11) ("Second Order" . 12) ("Body Force Weighted" . 13) ("PRESTO!" . 14) ("Continuity Based" . 15) ("Geo-Reconstruct" . 16) ("Donor-Acceptor" . 17) ("Modified Body Force Weighted" . 18) ("SIMPLE" . 20) ("SIMPLEC" . 21) ("PISO" . 22) ("Phase Coupled SIMPLE" . 23) ("Coupled" . 24) ("Fractional Step" . 25) ("Compressive" . 28) ("BGM" . 29) ("Phase Coupled PISO" . 30)))) (pressure/amg-alpha 0.01 real #f 0.01 0.1 ("Multigrid termination for the pressure:          ~a")) (pressure/relax 0.75 real #f 0.75 0.3 ("Under-Relaxation Factor for pressure:            ~a")) (mom/relax 0.75 real #f 0.75 0.7 ("Under-Relaxation Factor for momentum:            ~a")) (dpm/relax 0.75 real #f 0.75 0.5 ("Under-Relaxation Factor for dpm:                 ~a")) (density/relax 0.75 real #f 0.75 1 ("Under-Relaxation Factor for density:             ~a")) (max-iterations-per-step 10 integer #f 10 20 ("Max. no. of iterations per time step:            ~a"))) ("FGM Robustness Improvements" 244 (lambda () (and (cdr (assq 'sg-par-premix? (%rp-config #f))) (cdr (assq 'rp-unsteady? (%rp-config #f))) (rpgetvar 'prepdf/prmx-flamelet?) (eqv? (rpgetvar 'pdf/prmx-fla-turb-chem-model) 0) (cdr (assq 'sg-dpm? (%rp-config #f))))) (lambda () #f) (premixc/fgm-src-method-1? #t boolean #f #t #f ("Enable convergence method 1:                     ~a"))) ("DBNS Poor Mesh Numerics" 245 (lambda () (and (not (rp-seg?)) (rpgetvar 'mesh/bad/tmp-enhanced-pmn?))) (lambda () #f) (mesh/bad/enable-quality-based-treatment? #t boolean #f #t #f ("Quality Based Treatment?: ~a")) (mesh/bad/min-orthogonal-quality 0.2 real #f 0.2 0.05 ("Min Orthogonal Quality:   ~a")) (mesh/bad/tmp-limit-cfl? #t boolean #f #t #f ("Limit CFL?:               ~a")) (mesh/bad/tmp-cfl-limit 1. real #f 1. 1. ("CFL Limit:                ~a")) (mesh/bad/repair-sltn-mode 0 integer #f 0 0 ("Solution repair mode:     ~a")) (mesh/bad/repair-grad-mode 2 integer #f 2 2 ("Gradient repair mode:     ~a"))) ("Pseudo Time Method" 2000 (lambda () (and (cdr (assq 'rp-seg? (%rp-config #f))) (not (eqv? (rpgetvar 'flow/scheme) 24)))) (lambda () #f) (pseudo-transient-formulation? #f boolean #f #f #t ("Pseudo transient: ~a"))) ("Pseudo Time Method Transient" 2001 (lambda () (and (cdr (assq 'rp-unsteady? (%rp-config #f))) (rpgetvar 'show-beta-features?))) (lambda () #f) (pseudo-transient-formulation? #f boolean #f #f #f ("Pseudo time method is disabled: ~a"))) ("Pseudo Time Method Mode" 2002 (lambda () (or (and (cdr (assq 'rp-seg? (%rp-config #f))) (eqv? (rpgetvar 'flow/scheme) 24)) (cdr (assq 'rp-amg? (%rp-config #f))))) (lambda () #f) (pseudo-transient-mode 0 integer #f 0 0 ("Pseudo transient Time Step Mode: ~a"))) ("preview-defaults" 1000 (lambda () (rpgetvar 'solver/mode/preview-defaults)) (lambda () #f)) ("fast" 1000 (lambda () (rpgetvar 'solver/mode/fast)) (lambda () #f)) ("robust" 1000 (lambda () (rpgetvar 'solver/mode/robust)) (lambda () #f)) ("preview-defaults-base" 1003 (lambda () (rpgetvar 'solver/mode/preview-defaults)) (lambda () #t) (amg-coupled/greedy-coarsening? #t boolean #f #t #f ("Aggressive AMG coarsening for coupled equations: ~a" (("enabled" . #t) ("disabled" . #f)))) (amg/greedy-coarsening? #t boolean #f #t #f ("Aggressive AMG coarsening for scalar equations: ~a" (("enabled" . #t) ("disabled" . #f)))) (amg-coupled/group-method-fallback 2 integer #f 2 0) (amg/group-method-fallback 2 integer #f 2 0) (amg-coupled/group-size-3d 6 integer #f 6 8 ("AMG Group size for coupled equations: ~a")) (amg-scalar/group-size-3d 6 integer #f 6 8 ("AMG Group size for scalar equations: ~a")) (partition/auto/laplace/check-aspect-ratio 100. real #f 100. 100 ("Laplace partitioning's checker cutoff aspect ratio: ~a")) (partition/auto/laplace/aspect-ratio 10. real #f 10. 10 ("Laplace partitioning cutoff aspect ratio: ~a"))) ("preview-defaults-transient-pbns-base" 1003 (lambda () (and (cdr (assq 'rp-unsteady? (%rp-config #f))) (cdr (assq 'rp-seg? (%rp-config #f))) (rpgetvar 'solver/mode/preview-defaults))) (lambda () #t) (pressure/relax 0.8 real #f 0.8 0.3 ("Under-Relaxation Factor for pressure: ~a")) (mom/relax 0.7 real #f 0.7 0.7 ("Under-Relaxation Factor for momentum: ~a")) (simplec/skew-iter 1 integer #f 1 0 ("Skewness Correction for SIMPLEC: ~a")) (density/relax 1 real #f 1 1 ("Under-Relaxation Factor for density: ~a")) (density/pseudo-relax 1 real #f 1 1.) (pressure-coupled/courant-number 10000000000. real #f 10000000000. 200. ("CFL number for the coupled flow equation system: ~a")) (flow/scheme 21 integer #f 21 20 ("Pressure-velocity coupling: ~a" (("SIMPLE" . 20) ("SIMPLEC" . 21) ("PISO" . 22) ("Fractional Step" . 25) ("Coupled" . 24) ("Phase Coupled SIMPLE" . 23) ("Phase Coupled PISO" . 30))))) ("robust-base" 1000 (lambda () (rpgetvar 'solver/mode/robust)) (lambda () #t) (pressure/presto/limit-pgrad? #t boolean #f #t #f ("Limit high order terms in PRESTO!: ~a" (("enabled" . #t) ("disabled" . #f)))) (mesh/bad/enable-quality-based-treatment? #t boolean #f #t #f ("Enable poor mesh numerics based on cell quality: ~a" (("enabled" . #t) ("disabled" . #f)))) (amg/divergence-epsilon 1000000. real #f 1000000. 1000. ("AMG divergence epsilon: ~a")) (partition/laplace/use? #t boolean #f #t #f ("Use Laplace partitioning: ~a" (("enabled" . #t) ("disabled" . #f))))) ("fast-base" 1000 (lambda () (rpgetvar 'solver/mode/fast)) (lambda () #t)) ("coupled-pseudo-transient" 1001 (lambda () (and (rpgetvar 'solver/mode/coupled-pseudo-transient) (and (not (cdr (assq 'rp-unsteady? (%rp-config #f)))) (cdr (assq 'rp-seg? (%rp-config #f))) (not (cdr (assq 'sg-mphase? (%rp-config #f)))) (not (cdr (assq 'sg-melt? (%rp-config #f)))) (not (or (rpgetvar 'battery/model0-loaded?) (rpgetvar 'battery/model-loaded?) (rpgetvar 'resolved-fc-model-loaded?) (rpgetvar 'sofc_01/sofc-loaded?) (rpgetvar 'pemfc-model-loaded?)))))) (lambda () #f) (flow/scheme 24 integer #f 24 20 ("Pressure-velocity coupling: ~a" (("SIMPLE" . 20) ("SIMPLEC" . 21) ("PISO" . 22) ("Fractional Step" . 25) ("Coupled" . 24) ("Phase Coupled SIMPLE" . 23) ("Phase Coupled PISO" . 30)))) (pseudo-transient-formulation? #t boolean #f #t #f ("Pseudo-transient: ~a" (("enabled" . #t) ("disabled" . #f)))) (amg-coupled/greedy-coarsening? #t boolean #f #t #f ("Aggressive AMG coarsening for coupled equations: ~a" (("enabled" . #t) ("disabled" . #f)))) (amg/greedy-coarsening? #t boolean #f #t #f ("Aggressive AMG coarsening for segregated equations: ~a" (("enabled" . #t) ("disabled" . #f)))) (amg-coupled/group-size-3d 6 integer #f 6 8 ("AMG group size for coupled equations: ~a")) (amg-scalar/group-size-3d 6 integer #f 6 8 ("AMG group size for segregated equations: ~a"))) ("reacting-flow-numerics" 1003 (lambda () (and (rpgetvar 'solver/mode/coupled-pseudo-transient) (not (cdr (assq 'rp-unsteady? (%rp-config #f)))) (cdr (assq 'rp-seg? (%rp-config #f))) (not (cdr (assq 'sg-mphase? (%rp-config #f)))) (= (rpgetvar 'flow/scheme) 24) (rpgetvar 'pseudo-transient-formulation?) (or (cdr (assq 'rp-react? (%rp-config #f))) (cdr (assq 'sg-pdf? (%rp-config #f))) (cdr (assq 'sg-pdf-transport? (%rp-config #f))) (cdr (assq 'sg-premixed? (%rp-config #f))) (cdr (assq 'sg-par-premix? (%rp-config #f)))))) (lambda () #t) (density/pseudo-relax 0.25 real #f 0.25 1. ("Density explicit underrelaxation factor: ~a")) (temperature/pseudo-specific? #t boolean #f #t #t) (tvar/pseudo-specific? #t boolean #f #t #f) (enthalpy/pseudo-specific? #t boolean #f #t #f) (species/pseudo-specific? (#t) boolean-list #f (#t) (#f)) (pollutant/pseudo-specific? (#t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t) boolean-list #f (#t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #t) (#f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f)) (temperature/pseudo-time-scale-factor 1e+20 real #f 1e+20 1.) (tvar/pseudo-time-scale-factor 1e+20 real #f 1e+20 1.) (enthalpy/pseudo-time-scale-factor 1e+20 real #f 1e+20 1.) (species/pseudo-time-scale-factor (1e+20) real-list #f (1e+20) (1.)) (pollutant/pseudo-time-scale-factor (1e+20 1e+20 1e+20 1e+20 1e+20 1e+20 1e+20 1e+20 1e+20 1e+20 1e+20 1e+20 1e+20 1e+20 1e+20 1e+20 1e+20 1e+20 1e+20 1e+20 1e+20 1e+20 1e+20) real-list #f (1e+20 1e+20 1e+20 1e+20 1e+20 1e+20 1e+20 1e+20 1e+20 1e+20 1e+20 1e+20 1e+20 1e+20 1e+20 1e+20 1e+20 1e+20 1e+20 1e+20 1e+20 1e+20 1e+20) (1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.))) ("species-numerics" 1002 (lambda () (and (rpgetvar 'solver/mode/coupled-pseudo-transient) (not (cdr (assq 'rp-unsteady? (%rp-config #f)))) (cdr (assq 'rp-seg? (%rp-config #f))) (not (cdr (assq 'sg-mphase? (%rp-config #f)))) (= (rpgetvar 'flow/scheme) 24) (rpgetvar 'pseudo-transient-formulation?) (cdr (assq 'rp-spe? (%rp-config #f))) (cdr (assq 'rp-seg? (%rp-config #f))))) (lambda () #t) (density/pseudo-relax 0.25 real #f 0.25 1. ("Density explicit underrelaxation factor: ~a"))) ("tight-amg" 1000 (lambda () (rpgetvar 'solver/mode/tight-amg)) (lambda () #t) (amg-coupled/max-cycles 100 integer #f 100 10 ("Max cycles for coupled systems: ~a")) (amg-scalar/max-cycles 100 integer #f 100 30 ("Max cycles for scalar systems: ~a")) (amg/max-cycles 100 integer #f 100 30) (wd-phi/amg-alpha 0.0001 real #f 0.0001 0.1 ("AMG tolerances: ~a")) (dynamesh/smooth/laplace/amg-alpha 0.0001 real #f 0.0001 0.1) (x-mom/amg-alpha 0.0001 real #f 0.0001 0.1) (y-mom/amg-alpha 0.0001 real #f 0.0001 0.1) (z-mom/amg-alpha 0.0001 real #f 0.0001 0.1) (pressure/amg-alpha 0.0001 real #f 0.0001 0.1) (pressure-coupled/amg-alpha 0.0001 real #f 0.0001 0.1) (temperature/amg-alpha 0.0001 real #f 0.0001 0.1) (p1/amg-alpha 0.0001 real #f 0.0001 0.1) (disco/amg-alpha 0.0001 real #f 0.0001 0.1) (enthalpy/amg-alpha 0.0001 real #f 0.0001 0.1) (species/amg-alpha (0.0001) real-list #f (0.0001) (0.1)) (potential/amg-alpha 0.0001 real #f 0.0001 0.1) (dqmom-iem/amg-alpha 0.0001 real #f 0.0001 0.1) (uds/amg-alpha (0.0001) real-list #f (0.0001) (0.1)) (hyb-init/amg-alpha (0.0001 0.0001) real-list #f (0.0001 0.0001) (0.1 0.1)) (mp/amg-alpha 0.0001 real #f 0.0001 0.1) (granular-temperature/amg-alpha 0.0001 real #f 0.0001 0.1) (pb-disc/amg-alpha (0.0001) real-list #f (0.0001) (0.1)) (pb-qmom/amg-alpha (0.0001) real-list #f (0.0001) (0.1)) (pb-smm/amg-alpha (0.0001) real-list #f (0.0001) (0.1)) (pb-dqmom/amg-alpha (0.0001) real-list #f (0.0001) (0.1)) (iac/amg-alpha 0.0001 real #f 0.0001 0.1) (lsfun/amg-alpha 0.0001 real #f 0.0001 0.1) (w-swirl/amg-alpha 0.0001 real #f 0.0001 0.1) (nut/amg-alpha 0.0001 real #f 0.0001 0.1) (k/amg-alpha 0.0001 real #f 0.0001 0.1) (epsilon/amg-alpha 0.0001 real #f 0.0001 0.1) (v2/amg-alpha 0.0001 real #f 0.0001 0.1) (f/amg-alpha 0.0001 real #f 0.0001 0.1) (kl/amg-alpha 0.0001 real #f 0.0001 0.1) (omega/amg-alpha 0.0001 real #f 0.0001 0.1) (intermit/amg-alpha 0.0001 real #f 0.0001 0.1) (retheta/amg-alpha 0.0001 real #f 0.0001 0.1) (drsm/amg-alpha 0.0001 real #f 0.0001 0.1) (acoustics-waveeq/amg-alpha 0.0001 real #f 0.0001 0.1) (fmean/amg-alpha 0.0001 real #f 0.0001 0.1) (fmean2/amg-alpha 0.0001 real #f 0.0001 0.1) (fvar/amg-alpha 0.0001 real #f 0.0001 0.1) (fvar2/amg-alpha 0.0001 real #f 0.0001 0.1) (ic-fvar/amg-alpha 0.0001 real #f 0.0001 0.1) (vc-fvar/amg-alpha 0.0001 real #f 0.0001 0.1) (vd-fvar/amg-alpha 0.0001 real #f 0.0001 0.1) (ufla-y/amg-alpha 0.0001 real #f 0.0001 0.1) (premixc/amg-alpha 0.0001 real #f 0.0001 0.1) (pdftss/amg-alpha 0.0001 real #f 0.0001 0.1) (pull/amg-alpha 0.0001 real #f 0.0001 0.0001) (amg-c/amg-alpha 0.0001 real #f 0.0001 0.1) (soot-mom/amg-alpha 0.0001 real #f 0.0001 0.1) (tvar/amg-alpha 0.0001 real #f 0.0001 0.1) (ignition/amg-alpha 0.0001 real #f 0.0001 0.1) (ecfm-sigma/amg-alpha 0.0001 real #f 0.0001 0.1) (premix-g-eqn/amg-alpha 0.0001 real #f 0.0001 0.1) (premix-g-var/amg-alpha 0.0001 real #f 0.0001 0.1) (inert/amg-alpha 0.0001 real #f 0.0001 0.1) (wetsteam/amg-alpha 0.0001 real #f 0.0001 0.1)) ("default-urfs" 1000 (lambda () (rpgetvar 'solver/mode/default-urfs)) (lambda () #t) (pseudo-auto-time-step? #t boolean #f #t #t) (pseudo-auto-time-solid? #t boolean #f #t #t) (pseudo/autotime-lscale-option 1 integer #f 1 1) (pseudo-auto-time-step-scale-factor 1. real #f 1. 1.) (pressure-coupled/mom/pseudo-explicit-relax 0.5 real #f 0.5 0.5) (pressure-coupled/pressure/pseudo-explicit-relax 0.5 real #f 0.5 0.5) (potential/pseudo-relax 0.75 real #f 0.75 0.75) (potential-faradaic/pseudo-relax 0.1 real #f 0.1 0.1) (drift/pseudo-relax 0.1 real #f 0.1 0.1) (delh/pseudo-relax 0.9 real #f 0.9 0.9) (disco/pseudo-relax 1. real #f 1. 1.) (cvt/pseudo-relax 1. real #f 1. 1.) (wd-phi/pseudo-relax 0.75 real #f 0.75 0.75) (dynamesh/smooth/laplace/pseudo-relax 0.75 real #f 0.75 0.75) (mom/pseudo-relax 0.5 real #f 0.5 0.5) (pressure/pseudo-relax 0.5 real #f 0.5 0.5) (temperature/pseudo-relax 0.75 real #f 0.75 0.75) (tvar/pseudo-relax 0.75 real #f 0.75 0.75) (enthalpy/pseudo-relax 0.75 real #f 0.75 0.75) (species/pseudo-relax (0.75) real-list #f (0.75) (0.75)) (dqmom-iem/pseudo-relax 0.75 real #f 0.75 0.75) (mp/pseudo-relax 0.5 real #f 0.5 0.5) (w-swirl/pseudo-relax 0.75 real #f 0.75 0.75) (nut/pseudo-relax 0.75 real #f 0.75 0.75) (k/pseudo-relax 0.75 real #f 0.75 0.75) (epsilon/pseudo-relax 0.75 real #f 0.75 0.75) (v2/pseudo-relax 0.75 real #f 0.75 0.75) (f/pseudo-relax 0.75 real #f 0.75 0.75) (kl/pseudo-relax 0.75 real #f 0.75 0.75) (omega/pseudo-relax 0.75 real #f 0.75 0.75) (intermit/pseudo-relax 0.75 real #f 0.75 0.75) (retheta/pseudo-relax 0.75 real #f 0.75 0.75) (drsm/pseudo-relax 0.75 real #f 0.75 0.75) (fmean/pseudo-relax 0.75 real #f 0.75 0.75) (fmean2/pseudo-relax 0.75 real #f 0.75 0.75) (fvar/pseudo-relax 0.75 real #f 0.75 0.75) (fvar2/pseudo-relax 0.75 real #f 0.75 0.75) (premixc/pseudo-relax 0.75 real #f 0.75 0.75) (pdftss/pseudo-relax 0.75 real #f 0.75 0.75) (pull/pseudo-relax 0.75 real #f 0.75 0.75) (granular-temperature/pseudo-relax 0.75 real #f 0.75 0.75) (ecfm-sigma/pseudo-relax 0.75 real #f 0.75 0.75) (premix-g-var/pseudo-relax 0.75 real #f 0.75 0.75) (inert/pseudo-relax 0.75 real #f 0.75 0.75) (pollutant/pseudo-relax (0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75) real-list #f (0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75) (0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75 0.75)) (pb-qmom/pseudo-relax (0.75) real-list #f (0.75) (0.75)) (pb-smm/pseudo-relax (0.75) real-list #f (0.75) (0.75)) (pb-dqmom/pseudo-relax (0.75) real-list #f (0.75) (0.75)) (pb-disc/pseudo-relax (0.75) real-list #f (0.75) (0.75)) (iac/pseudo-relax 0.75 real #f 0.75 0.75) (wetsteam/pseudo-relax 0.75 real #f 0.75 0.6) (density/pseudo-relax 1. real #f 1. 1.) (body-force/pseudo-relax 1. real #f 1. 1.) (turb-viscosity/pseudo-relax 1. real #f 1. 1.) (p1/pseudo-relax 1. real #f 1. 1.) (soot-mom/pseudo-relax 1. real #f 1. 0.75) (uds/pseudo-relax (0.75) real-list #f (0.75) (0.75)) (potential/pseudo-implicit-relax 1. real #f 1. 1.) (temperature/pseudo-implicit-relax 1. real #f 1. 1.) (tvar/pseudo-implicit-relax 0.9 real #f 0.9 0.9) (enthalpy/pseudo-implicit-relax 1. real #f 1. 1.) (species/pseudo-implicit-relax (1.) real-list #f (1.) (1.)) (dqmom-iem/pseudo-implicit-relax 1. real #f 1. 1.) (mp/pseudo-implicit-relax 0.5 real #f 0.5 0.5) (w-swirl/pseudo-implicit-relax 0.9 real #f 0.9 0.9) (nut/pseudo-implicit-relax 0.8 real #f 0.8 0.8) (k/pseudo-implicit-relax 0.8 real #f 0.8 0.8) (epsilon/pseudo-implicit-relax 0.8 real #f 0.8 0.8) (v2/pseudo-implicit-relax 0.8 real #f 0.8 0.8) (f/pseudo-implicit-relax 0.8 real #f 0.8 0.8) (kl/pseudo-implicit-relax 0.8 real #f 0.8 0.8) (omega/pseudo-implicit-relax 0.8 real #f 0.8 0.8) (intermit/pseudo-implicit-relax 0.8 real #f 0.8 0.8) (retheta/pseudo-implicit-relax 0.8 real #f 0.8 0.8) (drsm/pseudo-implicit-relax 0.5 real #f 0.5 0.5) (fmean/pseudo-implicit-relax 1. real #f 1. 1.) (fmean2/pseudo-implicit-relax 1. real #f 1. 1.) (fvar/pseudo-implicit-relax 0.9 real #f 0.9 0.9) (fvar2/pseudo-implicit-relax 0.9 real #f 0.9 0.9) (premixc/pseudo-implicit-relax 0.9 real #f 0.9 0.9) (pdftss/pseudo-implicit-relax 1. real #f 1. 1.) (granular-temperature/pseudo-implicit-relax 0.2 real #f 0.2 0.2) (ecfm-sigma/pseudo-implicit-relax 0.9 real #f 0.9 0.9) (premix-g-var/pseudo-implicit-relax 0.8 real #f 0.8 0.8) (inert/pseudo-implicit-relax 1. real #f 1. 1.) (pollutant/pseudo-implicit-relax (1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.) real-list #f (1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.) (1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.)) (pb-qmom/pseudo-implicit-relax (0.5) real-list #f (0.5) (0.5)) (pb-smm/pseudo-implicit-relax (0.5) real-list #f (0.5) (0.5)) (pb-dqmom/pseudo-implicit-relax (0.5) real-list #f (0.5) (0.5)) (pb-disc/pseudo-implicit-relax (0.5) real-list #f (0.5) (0.5)) (iac/pseudo-implicit-relax 0.3 real #f 0.3 0.3) (wetsteam/pseudo-implicit-relax 0.1 real #f 0.1 0.1) (soot-mom/pseudo-implicit-relax 1. real #f 1. 1.) (sootspecies/pseudo-implicit-relax 1. real #f 1. 1.) (uds/pseudo-implicit-relax (1.) real-list #f (1.) (1.)) (potential/pseudo-specific? #f boolean #f #f #f) (temperature/pseudo-specific? #t boolean #f #t #t) (tvar/pseudo-specific? #f boolean #f #f #f) (enthalpy/pseudo-specific? #f boolean #f #f #f) (species/pseudo-specific? (#f) boolean-list #f (#f) (#f)) (dqmom-iem/pseudo-specific? #f boolean #f #f #f) (mp/pseudo-specific? #t boolean #f #t #t) (w-swirl/pseudo-specific? #t boolean #f #t #t) (nut/pseudo-specific? #t boolean #f #t #t) (k/pseudo-specific? #t boolean #f #t #t) (epsilon/pseudo-specific? #t boolean #f #t #t) (v2/pseudo-specific? #t boolean #f #t #t) (f/pseudo-specific? #t boolean #f #t #t) (kl/pseudo-specific? #t boolean #f #t #t) (omega/pseudo-specific? #t boolean #f #t #t) (intermit/pseudo-specific? #t boolean #f #t #t) (retheta/pseudo-specific? #t boolean #f #t #t) (drsm/pseudo-specific? #t boolean #f #t #t) (fmean/pseudo-specific? #f boolean #f #f #f) (fmean2/pseudo-specific? #f boolean #f #f #f) (fvar/pseudo-specific? #f boolean #f #f #f) (fvar2/pseudo-specific? #f boolean #f #f #f) (premixc/pseudo-specific? #f boolean #f #f #f) (pdftss/pseudo-specific? #f boolean #f #f #f) (granular-temperature/pseudo-specific? #t boolean #f #t #t) (ecfm-sigma/pseudo-specific? #f boolean #f #f #f) (premix-g-var/pseudo-specific? #f boolean #f #f #f) (inert/pseudo-specific? #f boolean #f #f #f) (pollutant/pseudo-specific? (#f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f) boolean-list #f (#f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f) (#f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f)) (pb-qmom/pseudo-specific? (#t) boolean-list #f (#t) (#t)) (pb-smm/pseudo-specific? (#t) boolean-list #f (#t) (#t)) (pb-dqmom/pseudo-specific? (#t) boolean-list #f (#t) (#t)) (pb-disc/pseudo-specific? (#t) boolean-list #f (#t) (#t)) (iac/pseudo-specific? #t boolean #f #t #t) (wetsteam/pseudo-specific? #t boolean #f #t #t) (soot-mom/pseudo-specific? #f boolean #f #f #f) (uds/pseudo-specific? (#f) boolean-list #f (#f) (#f)) (mom/update-derivatives-after-flow-solve? #t boolean #f #t #t)) ("overset-solver-defaults" 1004 (lambda () (and (rpgetvar 'solver/mode/overset-defaults?) (sg-overset?))) (lambda () #f) (amg/divergence-epsilon 1000000. real #f 1000000. 1000.) (amg/laplace-coarsening? #f boolean #f #f #f) (amg-coupled/laplace-coarsening? #f boolean #f #f #f)) ("MP: NITA with POPULATION BALANCE" 34 (lambda () (and (equal? (cdr (assq 'sg-mphase? (%rp-config #f))) 'multi-fluid) (eqv? (rpgetvar 'flow/scheme) 23) (cdr (assq 'sg-noniterative? (%rp-config #f))) (cdr (assq 'sg-pb? (%rp-config #f))))) (lambda () #f) (pressure/explicit-relax 0.3 real #f 0.3 1 ("Explicit Relaxation Factor for Pressure:         ~a")) (piso/number-of-correctors 2 integer #f 2 1 ("Number of PISO Correctors              :         ~a")) (mp/nita/update-drag-coeff 1 integer #f 1 0 ("Update Drag Coeff                      :         ~a"))) ("Default Local Pseudo Time AMG Controls" 246 (lambda () (or (eqv? (rpgetvar 'pseudo-time-method/segregated-pbns/dt-method) 2) (eqv? (rpgetvar 'pseudo-time-method/coupled-pbns/dt-method) 2) (eqv? (rpgetvar 'pseudo-time-method/implicit-dbns/dt-method) 2))) (lambda () #f) (pressure/dual-ts-cycle-type 1 integer #f 1 1 ("AMG cycle type for Pressure equation:       ~a" ,cycle-map)) (x-mom/dual-ts-cycle-type 0 integer #f 0 0 ("AMG cycle type for X-Momentum equation:     ~a" ,cycle-map)) (y-mom/dual-ts-cycle-type 0 integer #f 0 0 ("AMG cycle type for Y-Momentum equation:     ~a" ,cycle-map)) (z-mom/dual-ts-cycle-type 0 integer #f 0 0 ("AMG cycle type for Z-Momentum equation:     ~a" ,cycle-map)) (w-swirl/dual-ts-cycle-type 0 integer #f 0 0 ("AMG cycle type for Swirl equation:          ~a" ,cycle-map)) (temperature/dual-ts-cycle-type 3 integer #f 3 3 ("AMG cycle type for Temperature equation:    ~a" ,cycle-map)) (enthalpy/dual-ts-cycle-type 3 integer #f 3 3 ("AMG cycle type for Enthalpy equation:       ~a" ,cycle-map)) (tvar/dual-ts-cycle-type 0 integer #f 0 0 ("AMG cycle type for Tvar equation:           ~a" ,cycle-map)) (k/dual-ts-cycle-type 0 integer #f 0 0 ("AMG cycle type for K equation:              ~a" ,cycle-map)) (epsilon/dual-ts-cycle-type 0 integer #f 0 0 ("AMG cycle type for Epsilon equation:        ~a" ,cycle-map)) (omega/dual-ts-cycle-type 0 integer #f 0 0 ("AMG cycle type for Omega equation:          ~a" ,cycle-map)) (kl/dual-ts-cycle-type 0 integer #f 0 0 ("AMG cycle type for KL equation:             ~a" ,cycle-map)) (nut/dual-ts-cycle-type 0 integer #f 0 0 ("AMG cycle type for Nut equation:            ~a" ,cycle-map)) (drsm/dual-ts-cycle-type 0 integer #f 0 0 ("AMG cycle type for DRSM equation:           ~a" ,cycle-map)) (retheta/dual-ts-cycle-type 0 integer #f 0 0 ("AMG cycle type for Retheta equation:        ~a" ,cycle-map)) (intermit/dual-ts-cycle-type 0 integer #f 0 0 ("AMG cycle type for Intermit equation:       ~a" ,cycle-map)) (v2/dual-ts-cycle-type 0 integer #f 0 0 ("AMG cycle type for V2 equation:             ~a" ,cycle-map)) (f/dual-ts-cycle-type 0 integer #f 0 0 ("AMG cycle type for F equation:              ~a" ,cycle-map)) (fmean/dual-ts-cycle-type 0 integer #f 0 0 ("AMG cycle type for Fmean equation:          ~a" ,cycle-map)) (fmean2/dual-ts-cycle-type 0 integer #f 0 0 ("AMG cycle type for Fmean2 equation:         ~a" ,cycle-map)) (fvar/dual-ts-cycle-type 0 integer #f 0 0 ("AMG cycle type for Fvar equation:           ~a" ,cycle-map)) (fvar2/dual-ts-cycle-type 0 integer #f 0 0 ("AMG cycle type for Fvar2 equation:          ~a" ,cycle-map)) (premixc/dual-ts-cycle-type 0 integer #f 0 0 ("AMG cycle type for Premixc equation:        ~a" ,cycle-map)) (premix-g-var/dual-ts-cycle-type 0 integer #f 0 0 ("AMG cycle type for Premix-G-var equation:   ~a" ,cycle-map)) (pdftss/dual-ts-cycle-type 0 integer #f 0 0 ("AMG cycle type for PDF-tss equation:        ~a" ,cycle-map)) (sootspecies/dual-ts-cycle-type 0 integer #f 0 0 ("AMG cycle type for Soot-Species equation:   ~a" ,cycle-map)) (soot-mom/dual-ts-cycle-type 0 integer #f 0 0 ("AMG cycle type for Soot-Mom equation:       ~a" ,cycle-map)) (inert/dual-ts-cycle-type 0 integer #f 0 0 ("AMG cycle type for Inert equation:          ~a" ,cycle-map)) (ic-fvar/dual-ts-cycle-type 0 integer #f 0 0 ("AMG cycle type for IC-Fvar equation:        ~a" ,cycle-map)) (vc-fvar/dual-ts-cycle-type 0 integer #f 0 0 ("AMG cycle type for VC-Fvar equation:        ~a" ,cycle-map)) (vd-fvar/dual-ts-cycle-type 0 integer #f 0 0 ("AMG cycle type for VD-Fvar equation:        ~a" ,cycle-map)) (potential/dual-ts-cycle-type 3 integer #f 3 3 ("AMG cycle type for Potential equation:      ~a" ,cycle-map)) (dual-potential/dual-ts-cycle-type 3 integer #f 3 3 ("AMG cycle type for Electrolyte Potential equation:      ~a" ,cycle-map)) (lithium/dual-ts-cycle-type 3 integer #f 3 3 ("AMG cycle type for Lithium equation:        ~a" ,cycle-map)) (ecfm-sigma/dual-ts-cycle-type 0 integer #f 0 0 ("AMG cycle type for ECFM-Sigma equation:     ~a" ,cycle-map)) (pollutant/dual-ts-cycle-type (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) integer-list #f (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) ("AMG cycle type for Pollutant equation:      ~a"))) ("Coupled Local Pseudo Time AMG Controls" 247 (lambda () (and (eqv? (rpgetvar 'flow/scheme) 24) (cdr (assq 'rp-seg? (%rp-config #f))) (eqv? (rpgetvar 'pseudo-time-method/coupled-pbns/dt-method) 2) (not (cdr (assq 'sg-mphase? (%rp-config #f)))) (not (cdr (assq 'rp-react? (%rp-config #f)))) (not (cdr (assq 'rp-structure? (%rp-config #f)))) (not (cdr (assq 'sg-wetsteam? (%rp-config #f)))) (not (cdr (assq 'sg-crev? (%rp-config #f)))) (not (cdr (assq 'sg-geqn? (%rp-config #f)))) (not (cdr (assq 'sg-dqmom-iem? (%rp-config #f)))) (not (cdr (assq 'sg-noniterative? (%rp-config #f)))))) (lambda () #f) (w-swirl/dual-ts-cycle-type 3 integer #f 3 0 ("AMG cycle type for Swirl equation:          ~a" ,cycle-map)) (temperature/dual-ts-cycle-type 3 integer #f 3 3 ("AMG cycle type for Temperature equation:    ~a" ,cycle-map)) (enthalpy/dual-ts-cycle-type 3 integer #f 3 3 ("AMG cycle type for Enthalpy equation:       ~a" ,cycle-map)) (tvar/dual-ts-cycle-type 3 integer #f 3 0 ("AMG cycle type for Tvar equation:           ~a" ,cycle-map)) (k/dual-ts-cycle-type 3 integer #f 3 0 ("AMG cycle type for K equation:              ~a" ,cycle-map)) (epsilon/dual-ts-cycle-type 3 integer #f 3 0 ("AMG cycle type for Epsilon equation:        ~a" ,cycle-map)) (omega/dual-ts-cycle-type 3 integer #f 3 0 ("AMG cycle type for Omega equation:          ~a" ,cycle-map)) (kl/dual-ts-cycle-type 3 integer #f 3 0 ("AMG cycle type for KL equation:             ~a" ,cycle-map)) (nut/dual-ts-cycle-type 3 integer #f 3 0 ("AMG cycle type for Nut equation:            ~a" ,cycle-map)) (drsm/dual-ts-cycle-type 3 integer #f 3 0 ("AMG cycle type for DRSM equation:           ~a" ,cycle-map)) (retheta/dual-ts-cycle-type 3 integer #f 3 0 ("AMG cycle type for Retheta equation:        ~a" ,cycle-map)) (intermit/dual-ts-cycle-type 3 integer #f 3 0 ("AMG cycle type for Intermit equation:       ~a" ,cycle-map)) (v2/dual-ts-cycle-type 3 integer #f 3 0 ("AMG cycle type for V2 equation:             ~a" ,cycle-map)) (f/dual-ts-cycle-type 3 integer #f 3 0 ("AMG cycle type for F equation:              ~a" ,cycle-map)) (fmean/dual-ts-cycle-type 3 integer #f 3 0 ("AMG cycle type for Fmean equation:          ~a" ,cycle-map)) (fmean2/dual-ts-cycle-type 3 integer #f 3 0 ("AMG cycle type for Fmean2 equation:         ~a" ,cycle-map)) (fvar/dual-ts-cycle-type 3 integer #f 3 0 ("AMG cycle type for Fvar equation:           ~a" ,cycle-map)) (fvar2/dual-ts-cycle-type 3 integer #f 3 0 ("AMG cycle type for Fvar2 equation:          ~a" ,cycle-map)) (premixc/dual-ts-cycle-type 3 integer #f 3 0 ("AMG cycle type for Premixc equation:        ~a" ,cycle-map)) (premix-g-var/dual-ts-cycle-type 3 integer #f 3 0 ("AMG cycle type for Premix-G-var equation:   ~a" ,cycle-map)) (pdftss/dual-ts-cycle-type 3 integer #f 3 0 ("AMG cycle type for PDF-tss equation:        ~a" ,cycle-map)) (sootspecies/dual-ts-cycle-type 3 integer #f 3 0 ("AMG cycle type for Soot-Species equation:   ~a" ,cycle-map)) (soot-mom/dual-ts-cycle-type 3 integer #f 3 0 ("AMG cycle type for Soot-Mom equation:       ~a" ,cycle-map)) (inert/dual-ts-cycle-type 3 integer #f 3 0 ("AMG cycle type for Inert equation:          ~a" ,cycle-map)) (ic-fvar/dual-ts-cycle-type 3 integer #f 3 0 ("AMG cycle type for IC-Fvar equation:        ~a" ,cycle-map)) (vc-fvar/dual-ts-cycle-type 3 integer #f 3 0 ("AMG cycle type for VC-Fvar equation:        ~a" ,cycle-map)) (vd-fvar/dual-ts-cycle-type 3 integer #f 3 0 ("AMG cycle type for VD-Fvar equation:        ~a" ,cycle-map)) (potential/dual-ts-cycle-type 3 integer #f 3 3 ("AMG cycle type for Potential equation:      ~a" ,cycle-map)) (dual-potential/dual-ts-cycle-type 3 integer #f 3 3 ("AMG cycle type for Electrolyte Potential equation:      ~a" ,cycle-map)) (lithium/dual-ts-cycle-type 3 integer #f 3 3 ("AMG cycle type for Lithium equation:        ~a" ,cycle-map)) (ecfm-sigma/dual-ts-cycle-type 3 integer #f 3 0 ("AMG cycle type for ECFM-Sigma equation:     ~a" ,cycle-map)) (pollutant/dual-ts-cycle-type (3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3) integer-list #f (3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) ("AMG cycle type for Pollutant equation:      ~a"))) ("Segregated Local Pseudo Time AMG Controls" 248 (lambda () (and (not (eqv? (rpgetvar 'flow/scheme) 24)) (cdr (assq 'rp-seg? (%rp-config #f))) (eqv? (rpgetvar 'pseudo-time-method/segregated-pbns/dt-method) 2) (not (cdr (assq 'sg-mphase? (%rp-config #f)))) (not (cdr (assq 'rp-react? (%rp-config #f)))) (not (cdr (assq 'rp-structure? (%rp-config #f)))) (not (cdr (assq 'sg-wetsteam? (%rp-config #f)))) (not (cdr (assq 'sg-crev? (%rp-config #f)))) (not (cdr (assq 'sg-geqn? (%rp-config #f)))) (not (cdr (assq 'sg-dqmom-iem? (%rp-config #f)))) (not (cdr (assq 'sg-noniterative? (%rp-config #f)))))) (lambda () #f) (pressure/dual-ts-cycle-type 1 integer #f 1 1 ("AMG cycle type for Pressure equation:       ~a" ,cycle-map)) (x-mom/dual-ts-cycle-type 0 integer #f 0 0 ("AMG cycle type for X-Momentum equation:     ~a" ,cycle-map)) (y-mom/dual-ts-cycle-type 0 integer #f 0 0 ("AMG cycle type for Y-Momentum equation:     ~a" ,cycle-map)) (z-mom/dual-ts-cycle-type 0 integer #f 0 0 ("AMG cycle type for Z-Momentum equation:     ~a" ,cycle-map)) (w-swirl/dual-ts-cycle-type 0 integer #f 0 0 ("AMG cycle type for Swirl equation:          ~a" ,cycle-map)) (temperature/dual-ts-cycle-type 3 integer #f 3 3 ("AMG cycle type for Temperature equation:    ~a" ,cycle-map)) (enthalpy/dual-ts-cycle-type 3 integer #f 3 3 ("AMG cycle type for Enthalpy equation:       ~a" ,cycle-map)) (tvar/dual-ts-cycle-type 0 integer #f 0 0 ("AMG cycle type for Tvar equation:           ~a" ,cycle-map)) (k/dual-ts-cycle-type 0 integer #f 0 0 ("AMG cycle type for K equation:              ~a" ,cycle-map)) (epsilon/dual-ts-cycle-type 0 integer #f 0 0 ("AMG cycle type for Epsilon equation:        ~a" ,cycle-map)) (omega/dual-ts-cycle-type 0 integer #f 0 0 ("AMG cycle type for Omega equation:          ~a" ,cycle-map)) (kl/dual-ts-cycle-type 0 integer #f 0 0 ("AMG cycle type for KL equation:             ~a" ,cycle-map)) (nut/dual-ts-cycle-type 0 integer #f 0 0 ("AMG cycle type for Nut equation:            ~a" ,cycle-map)) (drsm/dual-ts-cycle-type 0 integer #f 0 0 ("AMG cycle type for DRSM equation:           ~a" ,cycle-map)) (retheta/dual-ts-cycle-type 0 integer #f 0 0 ("AMG cycle type for Retheta equation:        ~a" ,cycle-map)) (intermit/dual-ts-cycle-type 0 integer #f 0 0 ("AMG cycle type for Intermit equation:       ~a" ,cycle-map)) (v2/dual-ts-cycle-type 0 integer #f 0 0 ("AMG cycle type for V2 equation:             ~a" ,cycle-map)) (f/dual-ts-cycle-type 0 integer #f 0 0 ("AMG cycle type for F equation:              ~a" ,cycle-map)) (fmean/dual-ts-cycle-type 0 integer #f 0 0 ("AMG cycle type for Fmean equation:          ~a" ,cycle-map)) (fmean2/dual-ts-cycle-type 0 integer #f 0 0 ("AMG cycle type for Fmean2 equation:         ~a" ,cycle-map)) (fvar/dual-ts-cycle-type 0 integer #f 0 0 ("AMG cycle type for Fvar equation:           ~a" ,cycle-map)) (fvar2/dual-ts-cycle-type 0 integer #f 0 0 ("AMG cycle type for Fvar2 equation:          ~a" ,cycle-map)) (premixc/dual-ts-cycle-type 0 integer #f 0 0 ("AMG cycle type for Premixc equation:        ~a" ,cycle-map)) (premix-g-var/dual-ts-cycle-type 0 integer #f 0 0 ("AMG cycle type for Premix-G-var equation:   ~a" ,cycle-map)) (pdftss/dual-ts-cycle-type 0 integer #f 0 0 ("AMG cycle type for PDF-tss equation:        ~a" ,cycle-map)) (sootspecies/dual-ts-cycle-type 0 integer #f 0 0 ("AMG cycle type for Soot-Species equation:   ~a" ,cycle-map)) (soot-mom/dual-ts-cycle-type 0 integer #f 0 0 ("AMG cycle type for Soot-Mom equation:       ~a" ,cycle-map)) (inert/dual-ts-cycle-type 0 integer #f 0 0 ("AMG cycle type for Inert equation:          ~a" ,cycle-map)) (ic-fvar/dual-ts-cycle-type 0 integer #f 0 0 ("AMG cycle type for IC-Fvar equation:        ~a" ,cycle-map)) (vc-fvar/dual-ts-cycle-type 0 integer #f 0 0 ("AMG cycle type for VC-Fvar equation:        ~a" ,cycle-map)) (vd-fvar/dual-ts-cycle-type 0 integer #f 0 0 ("AMG cycle type for VD-Fvar equation:        ~a" ,cycle-map)) (potential/dual-ts-cycle-type 3 integer #f 3 3 ("AMG cycle type for Potential equation:      ~a" ,cycle-map)) (dual-potential/dual-ts-cycle-type 3 integer #f 3 3 ("AMG cycle type for Electrolyte Potential equation:      ~a" ,cycle-map)) (lithium/dual-ts-cycle-type 3 integer #f 3 3 ("AMG cycle type for Lithium equation:        ~a" ,cycle-map)) (ecfm-sigma/dual-ts-cycle-type 0 integer #f 0 0 ("AMG cycle type for ECFM-Sigma equation:     ~a" ,cycle-map)) (pollutant/dual-ts-cycle-type (3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3) integer-list #f (3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) ("AMG cycle type for Pollutant equation:      ~a")))))
))
(dv (
))
(cx1 (
(
(meshing-mode-vars ((re-partition . #f)))
(meshing-to-solver-scaling-factor -0.001)
(reference-frames-display (((name . "global") (display-state . ""))))
(reference-frames-definition (((name . "global") (origin point 0. 0. 0. (frame . parent)) (orientation two-axis (axis ((axis-from axis-label x (frame . global)) (axis-to vector 1. 0. 0. (frame . parent))) ((axis-from axis-label y (frame . global)) (axis-to vector 0. 1. 0. (frame . parent)))) (auto? . #t)) (transformations))))
(reference-frames (((name . "global") (id . 1) (parent . 0) (current-state (origin 0. 0. 0.) (quat 1. 0. 0. 0.)) (motion (motion-type . 0) (velocity 0. 0. 0.) (acceleration 0. 0. 0.) (omega (angle . 0.) (axis 0. 0. 0.)) (alpha (angle . 0.) (axis 0. 0. 0.)) (update . "")) (read-only? . #t))))
(tg-native-poly-mesh? #t)
(gui-processing? #t)
(graphics/scenes (((name . "contour-1") (graphics-object-names "contour-1") (camera-setting (position -0.01970531791448593 0.007728482596576214 0.00210542930290103) (target 2.492821948862911e-08 0. 0.0002500000118743628) (up-vector 0.08605334162712097 -0.01972993463277817 0.9960998892784119) (target-width . 0.008499152958393097) (target-height . 0.008499152958393097) (projection-type . "perspective"))) ((name . "mesh-1") (graphics-object-names "mesh-1") (camera-setting (position -0.01970531791448593 0.007728482596576214 0.00210542930290103) (target 2.492821948862911e-08 0. 0.0002500000118743628) (up-vector 0.08605334162712097 -0.01972993463277817 0.9960998892784119) (target-width . 0.008499152958393097) (target-height . 0.008499152958393097) (projection-type . "perspective")))))
(surfaces/groups ((plane-4 (4)) (inlet1 (3)) (inlet2 (2)) (outlet (1)) (wall (0))))
(cx-virtual-id-list (4196 4197 4198 4199 4200))
(cx-surface-id-map ((4 4200) (3 4199) (2 4198) (1 4197) (0 4196)))
(cx-surface-type ((0 0) (1 0) (2 0) (3 0) (4 0)))
(cx-surface-def-list ((4200 () (plane-surface 4200 '(-0.004026221111416817 -0.004024224355816841 0.001498790108598769) '(-0.004026221111416817 0.004028267227113247 0.001498790108598769) '(0.004026270471513271 -0.004024224355816841 0.001498790108598769) #f '(xy-plane (0. 0. 1.) (2.491287887096405e-08 2.021202817559242e-06 0.001498790108598769))) #f) (4199 () (zone-surface 4199 17) #f) (4198 () (zone-surface 4198 18) #f) (4197 () (zone-surface 4197 19) #f) (4196 () (zone-surface 4196 20) #f)))
(cx-surface-list #((0 ((face-color #f) (edge-color #f) (zid 20) (type zone-surf) (name wall) (status active) (facet-info (0 0 3873 7511)))) (1 ((face-color #f) (edge-color #f) (zid 19) (type zone-surf) (name outlet) (status active) (facet-info (0 0 104 142)))) (2 ((face-color #f) (edge-color #f) (zid 18) (type zone-surf) (name inlet2) (status active) (facet-info (0 0 103 140)))) (3 ((face-color #f) (edge-color #f) (zid 17) (type zone-surf) (name inlet1) (status active) (facet-info (0 0 101 136)))) (4 ((face-color #f) (edge-color #f) (type plane-surf) (name plane-4) (status susp) (facet-info (0 0 0 0)))) #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f))
(color/grid/color-by? id)
(color/grid/types? #f)
(graphics/casefile/model-color-scheme "pastel colors")
(hardcopy/black-on-white? #f)
(view-list ((wf-view ((-17.49067115783691 11.82658767700195 2.622974395751953) (0.001036286354064941 0. 0.25) (0.08338181674480438 -0.07604330033063889 0.9936149120330811) 8.499025344848633 8.499025344848633 "perspective") #(1. 0. 0. 0. 0. 1. 0. 0. 0. 0. 1. 0. 0. 0. 0. 1.)) (front ((2.492821868263322e-08 0. 0.02149788250067622) (2.492821868263322e-08 0. 0.0002500000000000004) (0. 1. 0.) 0.008499153000270487 0.008499153000270487 "perspective") #(1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1)) (back ((2.492821868263322e-08 0. -0.02099788250067622) (2.492821868263322e-08 0. 0.0002500000000000004) (0. 1. 0.) 0.008499153000270487 0.008499153000270487 "perspective") #(1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1)) (right ((0.0212479074288949 0. 0.0002500000000000004) (2.492821868263322e-08 0. 0.0002500000000000004) (0. 1. 0.) 0.008499153000270487 0.008499153000270487 "perspective") #(1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1)) (left ((-0.02124785757245753 0. 0.0002500000000000004) (2.492821868263322e-08 0. 0.0002500000000000004) (0. 1. 0.) 0.008499153000270487 0.008499153000270487 "perspective") #(1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1)) (top ((2.492821868263322e-08 0.02124788250067622 0.0002500000000000004) (2.492821868263322e-08 0. 0.0002500000000000004) (0. 0. 1.) 0.008499153000270487 0.008499153000270487 "perspective") #(1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1)) (bottom ((2.492821868263322e-08 -0.02124788250067622 0.0002500000000000004) (2.492821868263322e-08 0. 0.0002500000000000004) (0. 0. -1.) 0.008499153000270487 0.008499153000270487 "perspective") #(1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1)) (isometric ((0.01062396634370089 0.01502452231943607 0.01087394077330828) (2.492821868263322e-08 0. 0.0002500000000000004) (-0.5000000596046448 0.7071068286895752 -0.5000000596046448) 0.008499153000270487 0.008499153000270487 "perspective") #(1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1))))
(render/grid/surfaces (3 2 1 0))
(face-displacement 1)
(xy/bottom -1)
(scale/right -0.7)
(cx-mesh-version (22 2 0))
(cx-case-version (24 1 0))
)
))
(bc (fluid fluid mixture) (
(material . air)
(sources? . #f)
(source-terms)
(fixed? . #f)
(cylindrical-fixed-var? . #f)
(fixes)
(mrf-motion? . #f)
(mrf-relative-to-thread . -1)
(mrf-omega (constant . 0) (profile "" ""))
(mrf-grid-x-vel (constant . 0) (profile "" ""))
(mrf-grid-y-vel (constant . 0) (profile "" ""))
(mrf-grid-z-vel (constant . 0) (profile "" ""))
(mrf-x-origin (constant . 0.) (profile "" ""))
(mrf-y-origin (constant . 0.) (profile "" ""))
(mrf-z-origin (constant . 0.) (profile "" ""))
(mrf-ai (constant . 0) (profile "" ""))
(mrf-aj (constant . 0) (profile "" ""))
(mrf-ak (constant . 1) (profile "" ""))
(mrf-udf-zmotion-name . "none")
(mgrid-motion? . #f)
(mgrid-relative-to-thread . -1)
(mgrid-omega (constant . 0) (profile "" ""))
(mgrid-grid-x-vel (constant . 0) (profile "" ""))
(mgrid-grid-y-vel (constant . 0) (profile "" ""))
(mgrid-grid-z-vel (constant . 0) (profile "" ""))
(mgrid-x-origin (constant . 0) (profile "" ""))
(mgrid-y-origin (constant . 0) (profile "" ""))
(mgrid-z-origin (constant . 0) (profile "" ""))
(mgrid-ai (constant . 0) (profile "" ""))
(mgrid-aj (constant . 0) (profile "" ""))
(mgrid-ak (constant . 1) (profile "" ""))
(mgrid-udf-zmotion-name . "none")
(solid-relative-to-thread . -1)
(solid-omega (constant . 0) (profile "" ""))
(solid-grid-x-vel (constant . 0) (profile "" ""))
(solid-grid-y-vel (constant . 0) (profile "" ""))
(solid-grid-z-vel (constant . 0) (profile "" ""))
(solid-x-origin (constant . 0) (profile "" ""))
(solid-y-origin (constant . 0) (profile "" ""))
(solid-z-origin (constant . 0) (profile "" ""))
(solid-ai (constant . 0) (profile "" ""))
(solid-aj (constant . 0) (profile "" ""))
(solid-ak (constant . 1) (profile "" ""))
(solid-udf-zmotion-name . "none")
(deactivated? . #f)
(laminar? . #f)
(laminar-mut-zero? . #t)
(les-embedded-spec . 1)
(les-embedded-mom-scheme . 0)
(les-embedded-c-wale . 0.325)
(les-embedded-c-smag . 0.1)
(porous? . #f)
(dir-spec-cond . 0)
(cursys? . #f)
(cursys-name . "Select Curvilinear Coordinate System...")
(direction-1/x (constant . 1) (profile "" ""))
(direction-1/y (constant . 0) (profile "" ""))
(direction-1/z (constant . 0) (profile "" ""))
(direction-2/x (constant . 0) (profile "" ""))
(direction-2/y (constant . 1) (profile "" ""))
(direction-2/z (constant . 0) (profile "" ""))
(cone-axis/x . 1)
(cone-axis/y . 0)
(cone-axis/z . 0)
(cone-axis-pt/x . 1.)
(cone-axis-pt/y . 0)
(cone-axis-pt/z . 0)
(cone-angle . 0)
(rel-vel-resistance? . #t)
(porous-r/1 (constant . 211100000.) (profile "" ""))
(porous-r/2 (constant . 211100000.) (profile "" ""))
(porous-r/3 (constant . 211100000.) (profile "" ""))
(alt-inertial-form? . #f)
(porous-c/1 (constant . 0) (profile "" ""))
(porous-c/2 (constant . 0) (profile "" ""))
(porous-c/3 (constant . 0) (profile "" ""))
(c0 . 0)
(c1 . 0)
(porosity (constant . 1) (profile "" ""))
(viscosity-ratio (constant . 1.))
(equib-thermal? . #t)
(non-equib-thermal? . #f)
(solid-material . aluminum)
(area-density (constant . 1) (profile "" ""))
(heat-transfer-coeff (constant . 1) (profile "" ""))
(fanzone? . #f)
(fan-zone-list . 0)
(fan-thickness . 0)
(fan-hub-rad . 0)
(fan-tip-rad . 0)
(fan-x-origin . 0)
(fan-y-origin . 0)
(fan-z-origin . 0)
(fan-rot-dir . 0)
(fan-opert-angvel . 0)
(fan-inflection-point . 0.83)
(limit-flow-fan . #f)
(max-flow-rate . 0)
(min-flow-rate . 0)
(tan-source-term . #f)
(rad-source-term . #f)
(axial-source-term . #f)
(fan-axial-source-method . 0)
(fan-pre-jump . 0)
(fan-curve-fit . 0)
(fan-poly-order . 0)
(fan-ini-flow . 0)
(fan-test-angvel . 0)
(fan-test-temp . 0)
(fan-curve-filename . "")
(read-fan-curve . #f)
))
(bc (inlet1 velocity-inlet mixture) (
(velocity-spec . 2)
(frame-of-reference . 0)
(vmag (parameter . real-1) (constant . 2) (profile "" ""))
(p_sup (constant . 0) (profile "" ""))
(coordinate-system . 0)
(u (constant . 0) (profile "" ""))
(v (constant . 0) (profile "" ""))
(w (constant . 0) (profile "" ""))
(ni (constant . 1) (profile "" ""))
(nj (constant . 0) (profile "" ""))
(nk (constant . 0) (profile "" ""))
(ai . 1)
(aj . 0)
(ak . 0)
(x-origin . 0)
(y-origin . 0)
(z-origin . 0)
(omega-swirl . 0)
(t (parameter . real-2) (constant . 315) (profile "" ""))
(ke-spec . 2)
(k (constant . 1) (profile "" ""))
(o (constant . 1) (profile "" ""))
(turb-intensity . 0.05)
(turb-length-scale . 1)
(turb-hydraulic-diam . 1)
(turb-viscosity-ratio . 10)
(mixing-plane-thread? . #f)
(les-spec . 0)
))
(bc (inlet2 velocity-inlet mixture) (
(velocity-spec . 2)
(frame-of-reference . 0)
(vmag (parameter . real-3) (constant . 2) (profile "" ""))
(p_sup (constant . 0) (profile "" ""))
(coordinate-system . 0)
(u (constant . 0) (profile "" ""))
(v (constant . 0) (profile "" ""))
(w (constant . 0) (profile "" ""))
(ni (constant . 1) (profile "" ""))
(nj (constant . 0) (profile "" ""))
(nk (constant . 0) (profile "" ""))
(ai . 1)
(aj . 0)
(ak . 0)
(x-origin . 0)
(y-origin . 0)
(z-origin . 0)
(omega-swirl . 0)
(t (parameter . real-4) (constant . 285) (profile "" ""))
(ke-spec . 2)
(k (constant . 1) (profile "" ""))
(o (constant . 1) (profile "" ""))
(turb-intensity . 0.05)
(turb-length-scale . 1)
(turb-hydraulic-diam . 1)
(turb-viscosity-ratio . 10)
(mixing-plane-thread? . #f)
(les-spec . 0)
))
(bc (outlet pressure-outlet mixture) (
(frame-of-reference . 0)
(p (constant . 0) (profile "" ""))
(p-profile-multiplier . 1.)
(t0 (constant . 300) (profile "" ""))
(direction-spec . 1)
(coordinate-system . 0)
(ni (constant . 1) (profile "" ""))
(nj (constant . 0) (profile "" ""))
(nk (constant . 0) (profile "" ""))
(ai . 1)
(aj . 0)
(ak . 0)
(x-origin . 0)
(y-origin . 0)
(z-origin . 0)
(ke-spec . 2)
(k (constant . 1) (profile "" ""))
(o (constant . 1) (profile "" ""))
(turb-intensity . 0.05)
(turb-length-scale . 1)
(turb-hydraulic-diam . 1)
(turb-viscosity-ratio . 10)
(mixing-plane-thread? . #f)
(p-backflow-spec-gen . 0)
(prevent-reverse-flow? . #f)
(radial? . #f)
(avg-press-spec? . #f)
(avg-option . 0)
(targeted-mf-boundary? . #f)
(targeted-mf (constant . 1) (profile "" ""))
(targeted-mf-pmax (constant . 5000000.) (profile "" ""))
(targeted-mf-pmin (constant . 1) (profile "" ""))
))
(bc (wall wall mixture) (
(d (constant . 0) (profile "" ""))
(q-dot (constant . 0) (profile "" ""))
(material . aluminum)
(thermal-bc . 1)
(t (constant . 300) (profile "" ""))
(q (constant . 0) (profile "" ""))
(h (constant . 0) (profile "" ""))
(tinf (constant . 300) (profile "" ""))
(planar-conduction? . #f)
(shell-conduction ((thickness . 0) (material . "aluminum") (qdot (constant . 0) (profile))))
(thin-wall ((thickness . 0) (material . "aluminum") (qdot (constant . 0) ((profile "" "")))))
(motion-bc . 0)
(shear-bc . 0)
(rough-bc . 0)
(relative? . #t)
(rotating? . #f)
(vmag (constant . 0) (profile "" ""))
(ni . 1)
(nj . 0)
(nk . 0)
(components? . #f)
(u (constant . 0) (profile "" ""))
(v (constant . 0) (profile "" ""))
(w (constant . 0) (profile "" ""))
(ex-emiss (constant . 1) (profile "" ""))
(trad (constant . 300) (profile "" ""))
(rough-nasa? . #f)
(rough-shin-et-al? . #f)
(rough-data? . #f)
(roughness-height (constant . 0) (profile "" ""))
(roughness-const (constant . 0.5) (profile "" ""))
(roughness-height-cp (constant . 0) (profile "" ""))
(roughness-const-cp (constant . 0.5) (profile "" ""))
(roughness-const-nasa (constant . 0.5) (profile "" ""))
(roughness-const-shin (constant . 0.5) (profile "" ""))
(roughness-const-data (constant . 0.5) (profile "" ""))
(variable-roughness (inactive . #f) (profile "" ""))
(free-stream-velocity . 1.)
(free-stream-temp . 300.)
(characteristic-length . 1.)
(free-stream-temp-cp . 300.)
(characteristic-length-cp . 1.)
(liquid-content (constant . 1) (profile "" ""))
(liquid-content-cp (constant . 1) (profile "" ""))
(droplet-diameter (constant . 20) (profile "" ""))
(dpm/rq-roughness . 0.)
(dpm/rsm-roughness . 0.)
(dpm/bc-erosion-generic? . #t)
(dpm/bc-erosion-finnie? . #t)
(dpm/bc-erosion-finnie-k . 2.12e-07)
(dpm/bc-erosion-finnie-vel-exp . 2.)
(dpm/bc-erosion-finnie-max-erosion-angle . 0.3228859)
(dpm/bc-erosion-mclaury? . #t)
(dpm/bc-erosion-mclaury-a . 1.99e-07)
(dpm/bc-erosion-mclaury-vel-exp . 1.73)
(dpm/bc-erosion-mclaury-transition-angle . 0.2617994)
(dpm/bc-erosion-mclaury-b . -13.3)
(dpm/bc-erosion-mclaury-c . 7.85)
(dpm/bc-erosion-mclaury-w . 1.)
(dpm/bc-erosion-mclaury-x . 1.09)
(dpm/bc-erosion-mclaury-y . 0.125)
(dpm/bc-erosion-oka? . #t)
(dpm/bc-erosion-oka-e90 . 0.0006154)
(dpm/bc-erosion-oka-hv . 1.8)
(dpm/bc-erosion-oka-n1 . 0.8)
(dpm/bc-erosion-oka-n2 . 1.3)
(dpm/bc-erosion-oka-k2 . 2.35)
(dpm/bc-erosion-oka-k3 . 0.19)
(dpm/bc-erosion-oka-dref . 0.000326)
(dpm/bc-erosion-oka-vref . 104.)
(dpm/bc-erosion-dnv? . #t)
(dpm/bc-erosion-dnv-k . 2e-09)
(dpm/bc-erosion-dnv-n . 2.6)
(dpm/bc-erosion-dnv-ductile? . #t)
(dpm/bc-erosion-shear? . #t)
(dpm/bc-erosion-shear-v . 1.89e-08)
(dpm/bc-erosion-shear-c . 1.41)
(dpm/bc-erosion-shear-packing-limit . 0.63)
(dpm/bc-erosion-shielding? . #t)
(partially-catalytic-recombination-coefficient-o (constant . 0.) (profile "" ""))
(partially-catalytic-recombination-coefficient-n (constant . 0.) (profile "" ""))
(per-dispx (constant . 0) (profile "" ""))
(per-dispy (constant . 0) (profile "" ""))
(per-dispz (constant . 0) (profile "" ""))
(per-imagx (constant . 0) (profile "" ""))
(per-imagy (constant . 0) (profile "" ""))
(per-imagz (constant . 0) (profile "" ""))
(freq (constant . 0) (profile "" ""))
(amp (constant . 0) (profile "" ""))
(nodal-diam . 0)
(pass-number (constant . 0) (profile "" ""))
(fwd? . #f)
(aero? . #f)
(cmplx? . #f)
(norm? . #f)
(method? . 0)
(omega (constant . 0) (profile "" ""))
(x-origin . 0)
(y-origin . 0)
(z-origin . 0)
(ai . 0)
(aj . 0)
(ak . 1)
(shear-x (constant . 0) (profile "" ""))
(shear-y (constant . 0) (profile "" ""))
(shear-z (constant . 0) (profile "" ""))
(fslip . 0)
(eslip . 0)
(surf-tens-grad . 0.)
(specular-coeff . 0)
(mom-accom-coef . 1)
(therm-accom-coef . 1)
(eve-accom-coef . 0.001)
(caf (constant . 1) (profile "" ""))
(thermal-stabilization? . #f)
(scale-factor . 0)
(stab-method . 1)
))
(bc (interior--fluid interior mixture) (
))
(ni ((97 fluid)(17 inlet1)(18 inlet2)(19 outlet)(20 wall)(96 interior--fluid)))