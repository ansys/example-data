"""Script generated by ansys-mapdl-core version 0.59.dev0"""
from ansys.mapdl.core import launch_mapdl
mapdl = launch_mapdl(loglevel="WARN")
mapdl.run("/batch,list")
mapdl.run("/verify,linear_non_prestressed")
mapdl.title("linear_non_prestressedSolving brake squeal problem using linear non pre-stressed modal solve")
mapdl.run("/graphics,power							")  # turn on power graphics
mapdl.run("/rgb,index,100,100,100,0					")  # specifying RGB values for images and contour plot
mapdl.run("/rgb,index,80,80,80,13")
mapdl.run("/rgb,index,60,60,60,14")
mapdl.run("/rgb,index,0,0,0,15")
mapdl.run("/show,png")
mapdl.run("/out,scratch")
mapdl.prep7()
mapdl.shpp("off", "", "nowarn")  # turn off shape checking
mapdl.cdread("comb", "disc_pad_model", "cdb", "", "")  # Read disc_pad_model.cdb file
mapdl.allsel("all")
# ###############################################################################################
# isc_pad_model.cdb file contains the following information
# 
# . Nodes and elements of the brake disc pad model
# ***************************************************
# 
# . Element definition and their key-option settings
# ***************************************************
# 
# he model is meshed with Solid186 elements with reduced integration
# lement technology
# 
# ----------------------------------------------------------------------
# T1SOLID186
# EYOPT120
# -----------------------------------------------------------------------
# 
# 
# . Material properties for the brake disc pad model
# *****************************************************
# 
# ll components of the disc pad model is assigned with
# inear elastic isotropic materials
# 
# ----------------------------------------------------------------------
# PDENS17850.
# PEX1200000000000.
# PNUXY10.3
# ----------------------------------------------------------------------
# 
# 
# . Contact pair definition
# *****************************
# 
# rictional contact pairs are used to define contact between brake pads
# nd disc
# 
# onded contact pairs are used to define contact for other components of
# he braking system.
# 
# riction contact pair definition
# 
# -------------------------------------------------------------------------
# settid31
# setcid30
# tid
# cid
# ttidtarge170
# tcidconta174
# eyocid102
# eyocid120
# pmucid0.3
# eyocid20
# eyocid91
# eyocid51
# eyocid70
# -----------------------------------------------------------------------------
# 
# onded contact pair definition
# 
# ---------------------------------------------------------------------------------
# settid35
# setcid34
# tid
# cid
# ttidtarge170
# tcidconta174
# eyocid125
# eyocid42
# eyocid22
# eyocid91
# eyocid70
# -----------------------------------------------------------------------------------
# 
# . Boundary conditions and loading applied on the brake disc and pads
# ***********************************************************************
# 
# omponents are formed with nodes and element to specify boundary conditions
# 
# odes belonging to component FIXEDSU is fixed in all directions.
# 
# ----------------------------------------------------------------------------------
# mselsFIXEDSUnode
# allall
# -----------------------------------------------------------------------------------
# 
# odes belonging to the pads surface where pressure loading is applied are
# rouped to form components named _ZERODISPUX and _ZERODISPUY.
# 
# odes belonging to component _ZERODISPUX are constrained in X direction
# 
# odes belonging to component _ZERODISPUY are constrained in Y direction
# 
# ------------------------------------------------------------------------------------
# msels_ZERODISPUXnode
# allux0
# msels_ZERODISPUYnode
# alluy0
# -------------------------------------------------------------------------------------
# 
# 
# 
# ##############################################################################################
mapdl.allsel("all")
mapdl.run("fini")
# ########################################
# nalysis settings and solution control
# #########################################
mapdl.run("/solu")
mapdl.antype("modal")  # Perform modal analysis
mapdl.modopt("unsym", 30)  # Use UNSYM eigen solver and extract 30 modes
mapdl.mxpand(30, "", "", "")  # Expand 30 modes
mapdl.nropt("unsym")  # Unsymmetric Newton Raphson option
mapdl.cmsel("s", "c1_r", "")
mapdl.cmsel("a", "c2_r", "")
mapdl.cm("E_ROTOR", "elem")  # Create a component with target elements attached to disc
mapdl.allsel("all")
mapdl.cmrotate("e_rotor", "", "", 2, "")  # Rotate the target elements to generate sliding friction contact
mapdl.solve()
mapdl.finish()
mapdl.run("/post1")
mapdl.run("/out,")
mapdl.set("list")
mapdl.set(1, 21)
mapdl.plnsol("u", "sum")  # Plot the mode shape for mode 21
mapdl.set(1, 22)
mapdl.plnsol("u", "sum")  # Plot the mode shape for mode 22
mapdl.run("/show,close")
mapdl.finish()
mapdl.run("/clear,nostart")
mapdl.exit()